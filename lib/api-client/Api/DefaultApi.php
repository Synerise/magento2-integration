<?php
/**
 * DefaultApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Synerise\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * apiV4
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\ApiClient\ApiException;
use Synerise\ApiClient\Configuration;
use Synerise\ApiClient\HeaderSelector;
use Synerise\ApiClient\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation applicationStarted
     *
     * Application started
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\ApplicationstartedRequest $applicationstarted_request applicationstarted_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function applicationStarted($api_version, $applicationstarted_request)
    {
        $this->applicationStartedWithHttpInfo($api_version, $applicationstarted_request);
    }

    /**
     * Operation applicationStartedWithHttpInfo
     *
     * Application started
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ApplicationstartedRequest $applicationstarted_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function applicationStartedWithHttpInfo($api_version, $applicationstarted_request)
    {
        $request = $this->applicationStartedRequest($api_version, $applicationstarted_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applicationStartedAsync
     *
     * Application started
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ApplicationstartedRequest $applicationstarted_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applicationStartedAsync($api_version, $applicationstarted_request)
    {
        return $this->applicationStartedAsyncWithHttpInfo($api_version, $applicationstarted_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applicationStartedAsyncWithHttpInfo
     *
     * Application started
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ApplicationstartedRequest $applicationstarted_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applicationStartedAsyncWithHttpInfo($api_version, $applicationstarted_request)
    {
        $returnType = '';
        $request = $this->applicationStartedRequest($api_version, $applicationstarted_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applicationStarted'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ApplicationstartedRequest $applicationstarted_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applicationStartedRequest($api_version, $applicationstarted_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling applicationStarted'
            );
        }
        // verify the required parameter 'applicationstarted_request' is set
        if ($applicationstarted_request === null || (is_array($applicationstarted_request) && count($applicationstarted_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicationstarted_request when calling applicationStarted'
            );
        }

        $resourcePath = '/events/application-started';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($applicationstarted_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($applicationstarted_request));
            } else {
                $httpBody = $applicationstarted_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchAddOrUpdateClients
     *
     * Batch add or update Clients
     *
     * @param  string $accept accept (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchAddOrUpdateClients($accept, $api_version, $createa_clientin_crm_request)
    {
        $this->batchAddOrUpdateClientsWithHttpInfo($accept, $api_version, $createa_clientin_crm_request);
    }

    /**
     * Operation batchAddOrUpdateClientsWithHttpInfo
     *
     * Batch add or update Clients
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchAddOrUpdateClientsWithHttpInfo($accept, $api_version, $createa_clientin_crm_request)
    {
        $request = $this->batchAddOrUpdateClientsRequest($accept, $api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\Error[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchAddOrUpdateClientsAsync
     *
     * Batch add or update Clients
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateClientsAsync($accept, $api_version, $createa_clientin_crm_request)
    {
        return $this->batchAddOrUpdateClientsAsyncWithHttpInfo($accept, $api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchAddOrUpdateClientsAsyncWithHttpInfo
     *
     * Batch add or update Clients
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateClientsAsyncWithHttpInfo($accept, $api_version, $createa_clientin_crm_request)
    {
        $returnType = '';
        $request = $this->batchAddOrUpdateClientsRequest($accept, $api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchAddOrUpdateClients'
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchAddOrUpdateClientsRequest($accept, $api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling batchAddOrUpdateClients'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling batchAddOrUpdateClients'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling batchAddOrUpdateClients'
            );
        }
        if (count($createa_clientin_crm_request) > 1000) {
            throw new \InvalidArgumentException('invalid value for "$createa_clientin_crm_request" when calling DefaultApi.batchAddOrUpdateClients, number of items must be less than or equal to 1000.');
        }
        if (count($createa_clientin_crm_request) < 1) {
            throw new \InvalidArgumentException('invalid value for "$createa_clientin_crm_request" when calling DefaultApi.batchAddOrUpdateClients, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/clients/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchAddOrUpdateTransactions
     *
     * Batch add or update transactions
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest[] $createatransaction_request An array of transactions to post or update (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchAddOrUpdateTransactions($api_version, $createatransaction_request)
    {
        $this->batchAddOrUpdateTransactionsWithHttpInfo($api_version, $createatransaction_request);
    }

    /**
     * Operation batchAddOrUpdateTransactionsWithHttpInfo
     *
     * Batch add or update transactions
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest[] $createatransaction_request An array of transactions to post or update (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchAddOrUpdateTransactionsWithHttpInfo($api_version, $createatransaction_request)
    {
        $request = $this->batchAddOrUpdateTransactionsRequest($api_version, $createatransaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchAddOrUpdateTransactionsAsync
     *
     * Batch add or update transactions
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest[] $createatransaction_request An array of transactions to post or update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateTransactionsAsync($api_version, $createatransaction_request)
    {
        return $this->batchAddOrUpdateTransactionsAsyncWithHttpInfo($api_version, $createatransaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchAddOrUpdateTransactionsAsyncWithHttpInfo
     *
     * Batch add or update transactions
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest[] $createatransaction_request An array of transactions to post or update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateTransactionsAsyncWithHttpInfo($api_version, $createatransaction_request)
    {
        $returnType = '';
        $request = $this->batchAddOrUpdateTransactionsRequest($api_version, $createatransaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchAddOrUpdateTransactions'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest[] $createatransaction_request An array of transactions to post or update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchAddOrUpdateTransactionsRequest($api_version, $createatransaction_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling batchAddOrUpdateTransactions'
            );
        }
        // verify the required parameter 'createatransaction_request' is set
        if ($createatransaction_request === null || (is_array($createatransaction_request) && count($createatransaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createatransaction_request when calling batchAddOrUpdateTransactions'
            );
        }

        $resourcePath = '/transactions/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createatransaction_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createatransaction_request));
            } else {
                $httpBody = $createatransaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchSendEvents
     *
     * Batch send events
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\Event[] $event event (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchSendEvents($api_version, $event)
    {
        $this->batchSendEventsWithHttpInfo($api_version, $event);
    }

    /**
     * Operation batchSendEventsWithHttpInfo
     *
     * Batch send events
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\Event[] $event (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchSendEventsWithHttpInfo($api_version, $event)
    {
        $request = $this->batchSendEventsRequest($api_version, $event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchSendEventsAsync
     *
     * Batch send events
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\Event[] $event (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchSendEventsAsync($api_version, $event)
    {
        return $this->batchSendEventsAsyncWithHttpInfo($api_version, $event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchSendEventsAsyncWithHttpInfo
     *
     * Batch send events
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\Event[] $event (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchSendEventsAsyncWithHttpInfo($api_version, $event)
    {
        $returnType = '';
        $request = $this->batchSendEventsRequest($api_version, $event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchSendEvents'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\Event[] $event (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchSendEventsRequest($api_version, $event)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling batchSendEvents'
            );
        }
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling batchSendEvents'
            );
        }

        $resourcePath = '/events/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event));
            } else {
                $httpBody = $event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientAddedProductToCart
     *
     * Client added product to cart
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request clientaddedproducttocart_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientAddedProductToCart($api_version, $clientaddedproducttocart_request)
    {
        $this->clientAddedProductToCartWithHttpInfo($api_version, $clientaddedproducttocart_request);
    }

    /**
     * Operation clientAddedProductToCartWithHttpInfo
     *
     * Client added product to cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientAddedProductToCartWithHttpInfo($api_version, $clientaddedproducttocart_request)
    {
        $request = $this->clientAddedProductToCartRequest($api_version, $clientaddedproducttocart_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientAddedProductToCartAsync
     *
     * Client added product to cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientAddedProductToCartAsync($api_version, $clientaddedproducttocart_request)
    {
        return $this->clientAddedProductToCartAsyncWithHttpInfo($api_version, $clientaddedproducttocart_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientAddedProductToCartAsyncWithHttpInfo
     *
     * Client added product to cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientAddedProductToCartAsyncWithHttpInfo($api_version, $clientaddedproducttocart_request)
    {
        $returnType = '';
        $request = $this->clientAddedProductToCartRequest($api_version, $clientaddedproducttocart_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientAddedProductToCart'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientAddedProductToCartRequest($api_version, $clientaddedproducttocart_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientAddedProductToCart'
            );
        }
        // verify the required parameter 'clientaddedproducttocart_request' is set
        if ($clientaddedproducttocart_request === null || (is_array($clientaddedproducttocart_request) && count($clientaddedproducttocart_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientaddedproducttocart_request when calling clientAddedProductToCart'
            );
        }

        $resourcePath = '/events/added-to-cart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($clientaddedproducttocart_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clientaddedproducttocart_request));
            } else {
                $httpBody = $clientaddedproducttocart_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientAddedProductToFavorites
     *
     * Client added product to favorites
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientAddedProductToFavorites($api_version, $event_client_action)
    {
        $this->clientAddedProductToFavoritesWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientAddedProductToFavoritesWithHttpInfo
     *
     * Client added product to favorites
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientAddedProductToFavoritesWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientAddedProductToFavoritesRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientAddedProductToFavoritesAsync
     *
     * Client added product to favorites
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientAddedProductToFavoritesAsync($api_version, $event_client_action)
    {
        return $this->clientAddedProductToFavoritesAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientAddedProductToFavoritesAsyncWithHttpInfo
     *
     * Client added product to favorites
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientAddedProductToFavoritesAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientAddedProductToFavoritesRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientAddedProductToFavorites'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientAddedProductToFavoritesRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientAddedProductToFavorites'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientAddedProductToFavorites'
            );
        }

        $resourcePath = '/events/added-to-favorites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientCancelledTransaction
     *
     * Client cancelled transaction
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientCancelledTransaction($api_version, $event_client_action)
    {
        $this->clientCancelledTransactionWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientCancelledTransactionWithHttpInfo
     *
     * Client cancelled transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientCancelledTransactionWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientCancelledTransactionRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientCancelledTransactionAsync
     *
     * Client cancelled transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCancelledTransactionAsync($api_version, $event_client_action)
    {
        return $this->clientCancelledTransactionAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientCancelledTransactionAsyncWithHttpInfo
     *
     * Client cancelled transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCancelledTransactionAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientCancelledTransactionRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientCancelledTransaction'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientCancelledTransactionRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientCancelledTransaction'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientCancelledTransaction'
            );
        }

        $resourcePath = '/events/cancelled-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientCompletedTransaction
     *
     * Client completed transaction
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientCompletedTransaction($api_version, $event_client_action)
    {
        $this->clientCompletedTransactionWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientCompletedTransactionWithHttpInfo
     *
     * Client completed transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientCompletedTransactionWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientCompletedTransactionRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientCompletedTransactionAsync
     *
     * Client completed transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCompletedTransactionAsync($api_version, $event_client_action)
    {
        return $this->clientCompletedTransactionAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientCompletedTransactionAsyncWithHttpInfo
     *
     * Client completed transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCompletedTransactionAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientCompletedTransactionRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientCompletedTransaction'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientCompletedTransactionRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientCompletedTransaction'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientCompletedTransaction'
            );
        }

        $resourcePath = '/events/completed-transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientLoggedIn
     *
     * Client logged in
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientLoggedIn($api_version, $event_client_action)
    {
        $this->clientLoggedInWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientLoggedInWithHttpInfo
     *
     * Client logged in
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientLoggedInWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientLoggedInRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientLoggedInAsync
     *
     * Client logged in
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientLoggedInAsync($api_version, $event_client_action)
    {
        return $this->clientLoggedInAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientLoggedInAsyncWithHttpInfo
     *
     * Client logged in
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientLoggedInAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientLoggedInRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientLoggedIn'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientLoggedInRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientLoggedIn'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientLoggedIn'
            );
        }

        $resourcePath = '/events/logged-in';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientLoggedOut
     *
     * Client logged out
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientLoggedOut($api_version, $event_client_action)
    {
        $this->clientLoggedOutWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientLoggedOutWithHttpInfo
     *
     * Client logged out
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientLoggedOutWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientLoggedOutRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientLoggedOutAsync
     *
     * Client logged out
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientLoggedOutAsync($api_version, $event_client_action)
    {
        return $this->clientLoggedOutAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientLoggedOutAsyncWithHttpInfo
     *
     * Client logged out
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientLoggedOutAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientLoggedOutRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientLoggedOut'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientLoggedOutRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientLoggedOut'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientLoggedOut'
            );
        }

        $resourcePath = '/events/logged-out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientRegistered
     *
     * Client registered
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientRegistered($api_version, $event_client_action)
    {
        $this->clientRegisteredWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientRegisteredWithHttpInfo
     *
     * Client registered
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientRegisteredWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientRegisteredRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientRegisteredAsync
     *
     * Client registered
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRegisteredAsync($api_version, $event_client_action)
    {
        return $this->clientRegisteredAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientRegisteredAsyncWithHttpInfo
     *
     * Client registered
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRegisteredAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientRegisteredRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientRegistered'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientRegisteredRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientRegistered'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientRegistered'
            );
        }

        $resourcePath = '/events/registered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientRemovedProductFromCart
     *
     * Client removed product from cart
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request clientaddedproducttocart_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientRemovedProductFromCart($api_version, $clientaddedproducttocart_request)
    {
        $this->clientRemovedProductFromCartWithHttpInfo($api_version, $clientaddedproducttocart_request);
    }

    /**
     * Operation clientRemovedProductFromCartWithHttpInfo
     *
     * Client removed product from cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientRemovedProductFromCartWithHttpInfo($api_version, $clientaddedproducttocart_request)
    {
        $request = $this->clientRemovedProductFromCartRequest($api_version, $clientaddedproducttocart_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientRemovedProductFromCartAsync
     *
     * Client removed product from cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRemovedProductFromCartAsync($api_version, $clientaddedproducttocart_request)
    {
        return $this->clientRemovedProductFromCartAsyncWithHttpInfo($api_version, $clientaddedproducttocart_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientRemovedProductFromCartAsyncWithHttpInfo
     *
     * Client removed product from cart
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRemovedProductFromCartAsyncWithHttpInfo($api_version, $clientaddedproducttocart_request)
    {
        $returnType = '';
        $request = $this->clientRemovedProductFromCartRequest($api_version, $clientaddedproducttocart_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientRemovedProductFromCart'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientaddedproducttocartRequest $clientaddedproducttocart_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientRemovedProductFromCartRequest($api_version, $clientaddedproducttocart_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientRemovedProductFromCart'
            );
        }
        // verify the required parameter 'clientaddedproducttocart_request' is set
        if ($clientaddedproducttocart_request === null || (is_array($clientaddedproducttocart_request) && count($clientaddedproducttocart_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientaddedproducttocart_request when calling clientRemovedProductFromCart'
            );
        }

        $resourcePath = '/events/removed-from-cart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($clientaddedproducttocart_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clientaddedproducttocart_request));
            } else {
                $httpBody = $clientaddedproducttocart_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientSearched
     *
     * Client searched
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientSearched($api_version, $event_client_action)
    {
        $this->clientSearchedWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientSearchedWithHttpInfo
     *
     * Client searched
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientSearchedWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientSearchedRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientSearchedAsync
     *
     * Client searched
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientSearchedAsync($api_version, $event_client_action)
    {
        return $this->clientSearchedAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientSearchedAsyncWithHttpInfo
     *
     * Client searched
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientSearchedAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientSearchedRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientSearched'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientSearchedRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientSearched'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientSearched'
            );
        }

        $resourcePath = '/events/searched';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientShared
     *
     * Client shared
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientShared($api_version, $event_client_action)
    {
        $this->clientSharedWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientSharedWithHttpInfo
     *
     * Client shared
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientSharedWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientSharedRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientSharedAsync
     *
     * Client shared
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientSharedAsync($api_version, $event_client_action)
    {
        return $this->clientSharedAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientSharedAsyncWithHttpInfo
     *
     * Client shared
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientSharedAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientSharedRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientShared'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientSharedRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientShared'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientShared'
            );
        }

        $resourcePath = '/events/shared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientViewedProduct
     *
     * Client viewed product
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientViewedProductRequest $client_viewed_product_request client_viewed_product_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientViewedProduct($api_version, $client_viewed_product_request)
    {
        $this->clientViewedProductWithHttpInfo($api_version, $client_viewed_product_request);
    }

    /**
     * Operation clientViewedProductWithHttpInfo
     *
     * Client viewed product
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientViewedProductRequest $client_viewed_product_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientViewedProductWithHttpInfo($api_version, $client_viewed_product_request)
    {
        $request = $this->clientViewedProductRequest($api_version, $client_viewed_product_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientViewedProductAsync
     *
     * Client viewed product
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientViewedProductRequest $client_viewed_product_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientViewedProductAsync($api_version, $client_viewed_product_request)
    {
        return $this->clientViewedProductAsyncWithHttpInfo($api_version, $client_viewed_product_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientViewedProductAsyncWithHttpInfo
     *
     * Client viewed product
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientViewedProductRequest $client_viewed_product_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientViewedProductAsyncWithHttpInfo($api_version, $client_viewed_product_request)
    {
        $returnType = '';
        $request = $this->clientViewedProductRequest($api_version, $client_viewed_product_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientViewedProduct'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\ClientViewedProductRequest $client_viewed_product_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientViewedProductRequest($api_version, $client_viewed_product_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientViewedProduct'
            );
        }
        // verify the required parameter 'client_viewed_product_request' is set
        if ($client_viewed_product_request === null || (is_array($client_viewed_product_request) && count($client_viewed_product_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_viewed_product_request when calling clientViewedProduct'
            );
        }

        $resourcePath = '/events/product-view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($client_viewed_product_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($client_viewed_product_request));
            } else {
                $httpBody = $client_viewed_product_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVisitedScreen
     *
     * Client visited screen
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientVisitedScreen($api_version, $event_client_action)
    {
        $this->clientVisitedScreenWithHttpInfo($api_version, $event_client_action);
    }

    /**
     * Operation clientVisitedScreenWithHttpInfo
     *
     * Client visited screen
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVisitedScreenWithHttpInfo($api_version, $event_client_action)
    {
        $request = $this->clientVisitedScreenRequest($api_version, $event_client_action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVisitedScreenAsync
     *
     * Client visited screen
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVisitedScreenAsync($api_version, $event_client_action)
    {
        return $this->clientVisitedScreenAsyncWithHttpInfo($api_version, $event_client_action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVisitedScreenAsyncWithHttpInfo
     *
     * Client visited screen
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVisitedScreenAsyncWithHttpInfo($api_version, $event_client_action)
    {
        $returnType = '';
        $request = $this->clientVisitedScreenRequest($api_version, $event_client_action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVisitedScreen'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\EventClientAction $event_client_action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVisitedScreenRequest($api_version, $event_client_action)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling clientVisitedScreen'
            );
        }
        // verify the required parameter 'event_client_action' is set
        if ($event_client_action === null || (is_array($event_client_action) && count($event_client_action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_client_action when calling clientVisitedScreen'
            );
        }

        $resourcePath = '/events/visited-screen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_client_action)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_client_action));
            } else {
                $httpBody = $event_client_action;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAClientInCrm
     *
     * Create a Client in CRM
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createAClientInCrm($api_version, $createa_clientin_crm_request)
    {
        $this->createAClientInCrmWithHttpInfo($api_version, $createa_clientin_crm_request);
    }

    /**
     * Operation createAClientInCrmWithHttpInfo
     *
     * Create a Client in CRM
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAClientInCrmWithHttpInfo($api_version, $createa_clientin_crm_request)
    {
        $request = $this->createAClientInCrmRequest($api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAClientInCrmAsync
     *
     * Create a Client in CRM
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmAsync($api_version, $createa_clientin_crm_request)
    {
        return $this->createAClientInCrmAsyncWithHttpInfo($api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAClientInCrmAsyncWithHttpInfo
     *
     * Create a Client in CRM
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmAsyncWithHttpInfo($api_version, $createa_clientin_crm_request)
    {
        $returnType = '';
        $request = $this->createAClientInCrmRequest($api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAClientInCrm'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAClientInCrmRequest($api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createAClientInCrm'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling createAClientInCrm'
            );
        }

        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAClientInCrmInstant
     *
     * Create a Client in CRM (instant)
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function createAClientInCrmInstant($api_version, $createa_clientin_crm_request)
    {
        list($response) = $this->createAClientInCrmInstantWithHttpInfo($api_version, $createa_clientin_crm_request);
        return $response;
    }

    /**
     * Operation createAClientInCrmInstantWithHttpInfo
     *
     * Create a Client in CRM (instant)
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAClientInCrmInstantWithHttpInfo($api_version, $createa_clientin_crm_request)
    {
        $request = $this->createAClientInCrmInstantRequest($api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAClientInCrmInstantAsync
     *
     * Create a Client in CRM (instant)
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmInstantAsync($api_version, $createa_clientin_crm_request)
    {
        return $this->createAClientInCrmInstantAsyncWithHttpInfo($api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAClientInCrmInstantAsyncWithHttpInfo
     *
     * Create a Client in CRM (instant)
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmInstantAsyncWithHttpInfo($api_version, $createa_clientin_crm_request)
    {
        $returnType = 'string';
        $request = $this->createAClientInCrmInstantRequest($api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAClientInCrmInstant'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAClientInCrmInstantRequest($api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createAClientInCrmInstant'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling createAClientInCrmInstant'
            );
        }

        $resourcePath = '/clients/instant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createATransaction
     *
     * Create a transaction
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest $createatransaction_request createatransaction_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createATransaction($api_version, $createatransaction_request)
    {
        $this->createATransactionWithHttpInfo($api_version, $createatransaction_request);
    }

    /**
     * Operation createATransactionWithHttpInfo
     *
     * Create a transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest $createatransaction_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createATransactionWithHttpInfo($api_version, $createatransaction_request)
    {
        $request = $this->createATransactionRequest($api_version, $createatransaction_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createATransactionAsync
     *
     * Create a transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest $createatransaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createATransactionAsync($api_version, $createatransaction_request)
    {
        return $this->createATransactionAsyncWithHttpInfo($api_version, $createatransaction_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createATransactionAsyncWithHttpInfo
     *
     * Create a transaction
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest $createatransaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createATransactionAsyncWithHttpInfo($api_version, $createatransaction_request)
    {
        $returnType = '';
        $request = $this->createATransactionRequest($api_version, $createatransaction_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createATransaction'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateatransactionRequest $createatransaction_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createATransactionRequest($api_version, $createatransaction_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createATransaction'
            );
        }
        // verify the required parameter 'createatransaction_request' is set
        if ($createatransaction_request === null || (is_array($createatransaction_request) && count($createatransaction_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createatransaction_request when calling createATransaction'
            );
        }

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createatransaction_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createatransaction_request));
            } else {
                $httpBody = $createatransaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customClientImport
     *
     * Custom import or update client
     *
     * @param  string $accept accept (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request createa_clientin_crm_request (required)
     * @param  bool $phone_filter Enable to search client by phone in database if email is missing (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customClientImport($accept, $api_version, $createa_clientin_crm_request, $phone_filter = null)
    {
        $this->customClientImportWithHttpInfo($accept, $api_version, $createa_clientin_crm_request, $phone_filter);
    }

    /**
     * Operation customClientImportWithHttpInfo
     *
     * Custom import or update client
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     * @param  bool $phone_filter Enable to search client by phone in database if email is missing (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customClientImportWithHttpInfo($accept, $api_version, $createa_clientin_crm_request, $phone_filter = null)
    {
        $request = $this->customClientImportRequest($accept, $api_version, $createa_clientin_crm_request, $phone_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customClientImportAsync
     *
     * Custom import or update client
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     * @param  bool $phone_filter Enable to search client by phone in database if email is missing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customClientImportAsync($accept, $api_version, $createa_clientin_crm_request, $phone_filter = null)
    {
        return $this->customClientImportAsyncWithHttpInfo($accept, $api_version, $createa_clientin_crm_request, $phone_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customClientImportAsyncWithHttpInfo
     *
     * Custom import or update client
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     * @param  bool $phone_filter Enable to search client by phone in database if email is missing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customClientImportAsyncWithHttpInfo($accept, $api_version, $createa_clientin_crm_request, $phone_filter = null)
    {
        $returnType = '';
        $request = $this->customClientImportRequest($accept, $api_version, $createa_clientin_crm_request, $phone_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customClientImport'
     *
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest[] $createa_clientin_crm_request (required)
     * @param  bool $phone_filter Enable to search client by phone in database if email is missing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customClientImportRequest($accept, $api_version, $createa_clientin_crm_request, $phone_filter = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling customClientImport'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling customClientImport'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling customClientImport'
            );
        }

        $resourcePath = '/clients/custom-import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($phone_filter !== null) {
            if('form' === 'form' && is_array($phone_filter)) {
                foreach($phone_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['phoneFilter'] = $phone_filter;
            }
        }

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customEvent
     *
     * Custom event
     *
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CustomeventRequest $customevent_request customevent_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customEvent($api_version, $customevent_request)
    {
        $this->customEventWithHttpInfo($api_version, $customevent_request);
    }

    /**
     * Operation customEventWithHttpInfo
     *
     * Custom event
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CustomeventRequest $customevent_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customEventWithHttpInfo($api_version, $customevent_request)
    {
        $request = $this->customEventRequest($api_version, $customevent_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customEventAsync
     *
     * Custom event
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CustomeventRequest $customevent_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customEventAsync($api_version, $customevent_request)
    {
        return $this->customEventAsyncWithHttpInfo($api_version, $customevent_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customEventAsyncWithHttpInfo
     *
     * Custom event
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CustomeventRequest $customevent_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customEventAsyncWithHttpInfo($api_version, $customevent_request)
    {
        $returnType = '';
        $request = $this->customEventRequest($api_version, $customevent_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customEvent'
     *
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CustomeventRequest $customevent_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customEventRequest($api_version, $customevent_request)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling customEvent'
            );
        }
        // verify the required parameter 'customevent_request' is set
        if ($customevent_request === null || (is_array($customevent_request) && count($customevent_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customevent_request when calling customEvent'
            );
        }

        $resourcePath = '/events/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($customevent_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($customevent_request));
            } else {
                $httpBody = $customevent_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAClient
     *
     * Delete a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAClient($client_id, $accept, $content_type, $api_version)
    {
        $this->deleteAClientWithHttpInfo($client_id, $accept, $content_type, $api_version);
    }

    /**
     * Operation deleteAClientWithHttpInfo
     *
     * Delete a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAClientWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $request = $this->deleteAClientRequest($client_id, $accept, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAClientAsync
     *
     * Delete a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientAsync($client_id, $accept, $content_type, $api_version)
    {
        return $this->deleteAClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAClientAsyncWithHttpInfo
     *
     * Delete a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientRequest($client_id, $accept, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAClient'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAClientRequest($client_id, $accept, $content_type, $api_version)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling deleteAClient'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteAClient'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling deleteAClient'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAClientByCustomId
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAClientByCustomId($client_custom_id, $content_type, $api_version)
    {
        $this->deleteAClientByCustomIdWithHttpInfo($client_custom_id, $content_type, $api_version);
    }

    /**
     * Operation deleteAClientByCustomIdWithHttpInfo
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAClientByCustomIdWithHttpInfo($client_custom_id, $content_type, $api_version)
    {
        $request = $this->deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAClientByCustomIdAsync
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientByCustomIdAsync($client_custom_id, $content_type, $api_version)
    {
        return $this->deleteAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAClientByCustomIdAsyncWithHttpInfo
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAClientByCustomId'
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version)
    {
        // verify the required parameter 'client_custom_id' is set
        if ($client_custom_id === null || (is_array($client_custom_id) && count($client_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_custom_id when calling deleteAClientByCustomId'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteAClientByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling deleteAClientByCustomId'
            );
        }

        $resourcePath = '/clients/by-customid/{clientCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientCustomID' . '}',
                ObjectSerializer::toPathValue($client_custom_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAClient
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\InResponseClientDetails|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function findAClient($identifier_type, $identifier_value, $content_type, $api_version)
    {
        list($response) = $this->findAClientWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version);
        return $response;
    }

    /**
     * Operation findAClientWithHttpInfo
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\InResponseClientDetails|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAClientWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
    {
        $request = $this->findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\InResponseClientDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\InResponseClientDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\InResponseClientDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAClientAsync
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAClientAsync($identifier_type, $identifier_value, $content_type, $api_version)
    {
        return $this->findAClientAsyncWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAClientAsyncWithHttpInfo
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAClientAsyncWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
    {
        $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails';
        $request = $this->findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAClient'
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version)
    {
        // verify the required parameter 'identifier_type' is set
        if ($identifier_type === null || (is_array($identifier_type) && count($identifier_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_type when calling findAClient'
            );
        }
        // verify the required parameter 'identifier_value' is set
        if ($identifier_value === null || (is_array($identifier_value) && count($identifier_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_value when calling findAClient'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling findAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling findAClient'
            );
        }

        $resourcePath = '/clients/{identifierType}/{identifierValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($identifier_type !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierType' . '}',
                ObjectSerializer::toPathValue($identifier_type),
                $resourcePath
            );
        }
        // path params
        if ($identifier_value !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierValue' . '}',
                ObjectSerializer::toPathValue($identifier_value),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllTags
     *
     * Get all tags
     *
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\Tag[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function getAllTags($api_version)
    {
        list($response) = $this->getAllTagsWithHttpInfo($api_version);
        return $response;
    }

    /**
     * Operation getAllTagsWithHttpInfo
     *
     * Get all tags
     *
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\Tag[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllTagsWithHttpInfo($api_version)
    {
        $request = $this->getAllTagsRequest($api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\Tag[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\Tag[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\Tag[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllTagsAsync
     *
     * Get all tags
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllTagsAsync($api_version)
    {
        return $this->getAllTagsAsyncWithHttpInfo($api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllTagsAsyncWithHttpInfo
     *
     * Get all tags
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllTagsAsyncWithHttpInfo($api_version)
    {
        $returnType = '\Synerise\ApiClient\Model\Tag[]';
        $request = $this->getAllTagsRequest($api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllTags'
     *
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllTagsRequest($api_version)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getAllTags'
            );
        }

        $resourcePath = '/clients/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientData
     *
     * Get Client data
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\InResponseClientDetails|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function getClientData($client_id, $content_type, $api_version)
    {
        list($response) = $this->getClientDataWithHttpInfo($client_id, $content_type, $api_version);
        return $response;
    }

    /**
     * Operation getClientDataWithHttpInfo
     *
     * Get Client data
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\InResponseClientDetails|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientDataWithHttpInfo($client_id, $content_type, $api_version)
    {
        $request = $this->getClientDataRequest($client_id, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\InResponseClientDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\InResponseClientDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\InResponseClientDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientDataAsync
     *
     * Get Client data
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientDataAsync($client_id, $content_type, $api_version)
    {
        return $this->getClientDataAsyncWithHttpInfo($client_id, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientDataAsyncWithHttpInfo
     *
     * Get Client data
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientDataAsyncWithHttpInfo($client_id, $content_type, $api_version)
    {
        $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails';
        $request = $this->getClientDataRequest($client_id, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientData'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClientDataRequest($client_id, $content_type, $api_version)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getClientData'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getClientData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getClientData'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientEvents
     *
     * Get Client events as Business Profile
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function getClientEvents($client_id, $content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        list($response) = $this->getClientEventsWithHttpInfo($client_id, $content_type, $api_version, $time_from, $time_to, $action, $limit);
        return $response;
    }

    /**
     * Operation getClientEventsWithHttpInfo
     *
     * Get Client events as Business Profile
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientEventsWithHttpInfo($client_id, $content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $request = $this->getClientEventsRequest($client_id, $content_type, $api_version, $time_from, $time_to, $action, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\GetClienteventsHTTP200[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientEventsAsync
     *
     * Get Client events as Business Profile
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientEventsAsync($client_id, $content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        return $this->getClientEventsAsyncWithHttpInfo($client_id, $content_type, $api_version, $time_from, $time_to, $action, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientEventsAsyncWithHttpInfo
     *
     * Get Client events as Business Profile
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientEventsAsyncWithHttpInfo($client_id, $content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
        $request = $this->getClientEventsRequest($client_id, $content_type, $api_version, $time_from, $time_to, $action, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientEvents'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClientEventsRequest($client_id, $content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getClientEvents'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getClientEvents'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getClientEvents'
            );
        }
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getClientEvents, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getClientEvents, must be bigger than or equal to 1.');
        }


        $resourcePath = '/events/by-client/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($time_from !== null) {
            if('form' === 'form' && is_array($time_from)) {
                foreach($time_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[from]'] = $time_from;
            }
        }
        // query params
        if ($time_to !== null) {
            if('form' === 'form' && is_array($time_to)) {
                foreach($time_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[to]'] = $time_to;
            }
        }
        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientOwnEvents
     *
     * Get Client's events as Client
     *
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function getClientOwnEvents($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        list($response) = $this->getClientOwnEventsWithHttpInfo($content_type, $api_version, $time_from, $time_to, $action, $limit);
        return $response;
    }

    /**
     * Operation getClientOwnEventsWithHttpInfo
     *
     * Get Client's events as Client
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientOwnEventsWithHttpInfo($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $request = $this->getClientOwnEventsRequest($content_type, $api_version, $time_from, $time_to, $action, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\GetClienteventsHTTP200[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientOwnEventsAsync
     *
     * Get Client's events as Client
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientOwnEventsAsync($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        return $this->getClientOwnEventsAsyncWithHttpInfo($content_type, $api_version, $time_from, $time_to, $action, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientOwnEventsAsyncWithHttpInfo
     *
     * Get Client's events as Client
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientOwnEventsAsyncWithHttpInfo($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
        $request = $this->getClientOwnEventsRequest($content_type, $api_version, $time_from, $time_to, $action, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientOwnEvents'
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClientOwnEventsRequest($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getClientOwnEvents'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getClientOwnEvents'
            );
        }
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getClientOwnEvents, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getClientOwnEvents, must be bigger than or equal to 1.');
        }


        $resourcePath = '/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($time_from !== null) {
            if('form' === 'form' && is_array($time_from)) {
                foreach($time_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[from]'] = $time_from;
            }
        }
        // query params
        if ($time_to !== null) {
            if('form' === 'form' && is_array($time_to)) {
                foreach($time_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[to]'] = $time_to;
            }
        }
        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsFromAllClients
     *
     * Get events from all Clients
     *
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function getEventsFromAllClients($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        list($response) = $this->getEventsFromAllClientsWithHttpInfo($content_type, $api_version, $time_from, $time_to, $action, $limit);
        return $response;
    }

    /**
     * Operation getEventsFromAllClientsWithHttpInfo
     *
     * Get events from all Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\GetClienteventsHTTP200[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsFromAllClientsWithHttpInfo($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $request = $this->getEventsFromAllClientsRequest($content_type, $api_version, $time_from, $time_to, $action, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\GetClienteventsHTTP200[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsFromAllClientsAsync
     *
     * Get events from all Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsFromAllClientsAsync($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        return $this->getEventsFromAllClientsAsyncWithHttpInfo($content_type, $api_version, $time_from, $time_to, $action, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsFromAllClientsAsyncWithHttpInfo
     *
     * Get events from all Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsFromAllClientsAsyncWithHttpInfo($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        $returnType = '\Synerise\ApiClient\Model\GetClienteventsHTTP200[]';
        $request = $this->getEventsFromAllClientsRequest($content_type, $api_version, $time_from, $time_to, $action, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsFromAllClients'
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  \DateTime $time_from Start of the time range to query. UTC time in ISO 8601. If no value is provided, the results are returned starting with the oldest entry in the database. (optional)
     * @param  \DateTime $time_to End of the time range to query. UTC time in ISO 8601. If no value is provided, the current time applies. (optional)
     * @param  string $action Filter events by action type. For example, to retrieve completed transactions, enter &#x60;transaction.charge&#x60; (optional)
     * @param  int $limit The number of events to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEventsFromAllClientsRequest($content_type, $api_version, $time_from = null, $time_to = null, $action = null, $limit = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getEventsFromAllClients'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getEventsFromAllClients'
            );
        }
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getEventsFromAllClients, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.getEventsFromAllClients, must be bigger than or equal to 1.');
        }


        $resourcePath = '/events/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($time_from !== null) {
            if('form' === 'form' && is_array($time_from)) {
                foreach($time_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[from]'] = $time_from;
            }
        }
        // query params
        if ($time_to !== null) {
            if('form' === 'form' && is_array($time_to)) {
                foreach($time_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['time[to]'] = $time_to;
            }
        }
        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkAClientDeviceByClientId
     *
     * Link a Client device by Client ID
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request linka_clientdevice_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function linkAClientDeviceByClientId($client_id, $api_version, $linka_clientdevice_request)
    {
        $this->linkAClientDeviceByClientIdWithHttpInfo($client_id, $api_version, $linka_clientdevice_request);
    }

    /**
     * Operation linkAClientDeviceByClientIdWithHttpInfo
     *
     * Link a Client device by Client ID
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkAClientDeviceByClientIdWithHttpInfo($client_id, $api_version, $linka_clientdevice_request)
    {
        $request = $this->linkAClientDeviceByClientIdRequest($client_id, $api_version, $linka_clientdevice_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation linkAClientDeviceByClientIdAsync
     *
     * Link a Client device by Client ID
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkAClientDeviceByClientIdAsync($client_id, $api_version, $linka_clientdevice_request)
    {
        return $this->linkAClientDeviceByClientIdAsyncWithHttpInfo($client_id, $api_version, $linka_clientdevice_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkAClientDeviceByClientIdAsyncWithHttpInfo
     *
     * Link a Client device by Client ID
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkAClientDeviceByClientIdAsyncWithHttpInfo($client_id, $api_version, $linka_clientdevice_request)
    {
        $returnType = '';
        $request = $this->linkAClientDeviceByClientIdRequest($client_id, $api_version, $linka_clientdevice_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkAClientDeviceByClientId'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkAClientDeviceByClientIdRequest($client_id, $api_version, $linka_clientdevice_request)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling linkAClientDeviceByClientId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling linkAClientDeviceByClientId'
            );
        }
        // verify the required parameter 'linka_clientdevice_request' is set
        if ($linka_clientdevice_request === null || (is_array($linka_clientdevice_request) && count($linka_clientdevice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linka_clientdevice_request when calling linkAClientDeviceByClientId'
            );
        }

        $resourcePath = '/clients/{clientID}/linked-devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($linka_clientdevice_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($linka_clientdevice_request));
            } else {
                $httpBody = $linka_clientdevice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkAClientDeviceByClientUuid
     *
     * Link a Client device by other parameters
     *
     * @param  string $identifier_type The Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $accept accept (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request linka_clientdevice_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function linkAClientDeviceByClientUuid($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
    {
        $this->linkAClientDeviceByClientUuidWithHttpInfo($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request);
    }

    /**
     * Operation linkAClientDeviceByClientUuidWithHttpInfo
     *
     * Link a Client device by other parameters
     *
     * @param  string $identifier_type The Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkAClientDeviceByClientUuidWithHttpInfo($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
    {
        $request = $this->linkAClientDeviceByClientUuidRequest($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation linkAClientDeviceByClientUuidAsync
     *
     * Link a Client device by other parameters
     *
     * @param  string $identifier_type The Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkAClientDeviceByClientUuidAsync($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
    {
        return $this->linkAClientDeviceByClientUuidAsyncWithHttpInfo($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkAClientDeviceByClientUuidAsyncWithHttpInfo
     *
     * Link a Client device by other parameters
     *
     * @param  string $identifier_type The Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkAClientDeviceByClientUuidAsyncWithHttpInfo($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
    {
        $returnType = '';
        $request = $this->linkAClientDeviceByClientUuidRequest($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkAClientDeviceByClientUuid'
     *
     * @param  string $identifier_type The Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\LinkaClientdeviceRequest $linka_clientdevice_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkAClientDeviceByClientUuidRequest($identifier_type, $identifier_value, $accept, $api_version, $linka_clientdevice_request)
    {
        // verify the required parameter 'identifier_type' is set
        if ($identifier_type === null || (is_array($identifier_type) && count($identifier_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_type when calling linkAClientDeviceByClientUuid'
            );
        }
        // verify the required parameter 'identifier_value' is set
        if ($identifier_value === null || (is_array($identifier_value) && count($identifier_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_value when calling linkAClientDeviceByClientUuid'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling linkAClientDeviceByClientUuid'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling linkAClientDeviceByClientUuid'
            );
        }
        // verify the required parameter 'linka_clientdevice_request' is set
        if ($linka_clientdevice_request === null || (is_array($linka_clientdevice_request) && count($linka_clientdevice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linka_clientdevice_request when calling linkAClientDeviceByClientUuid'
            );
        }

        $resourcePath = '/clients/{identifierType}/{identifierValue}/linked-devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($identifier_type !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierType' . '}',
                ObjectSerializer::toPathValue($identifier_type),
                $resourcePath
            );
        }
        // path params
        if ($identifier_value !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierValue' . '}',
                ObjectSerializer::toPathValue($identifier_value),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($linka_clientdevice_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($linka_clientdevice_request));
            } else {
                $httpBody = $linka_clientdevice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClients
     *
     * List Clients
     *
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\ApiClient\Model\InResponseClientDetails[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400
     */
    public function listClients($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        list($response) = $this->listClientsWithHttpInfo($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);
        return $response;
    }

    /**
     * Operation listClientsWithHttpInfo
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ApiClient\Model\InResponseClientDetails[]|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400|\Synerise\ApiClient\Model\HTTP400, HTTP status code, HTTP response headers (array of strings)
     */
    public function listClientsWithHttpInfo($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        $request = $this->listClientsRequest($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\ApiClient\Model\InResponseClientDetails[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\InResponseClientDetails[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Synerise\ApiClient\Model\HTTP400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ApiClient\Model\HTTP400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\InResponseClientDetails[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClientsAsync
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsAsync($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        return $this->listClientsAsyncWithHttpInfo($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listClientsAsyncWithHttpInfo
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsAsyncWithHttpInfo($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        $returnType = '\Synerise\ApiClient\Model\InResponseClientDetails[]';
        $request = $this->listClientsRequest($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClients'
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listClientsRequest($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling listClients'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling listClients'
            );
        }
        if ($page_index !== null && $page_index < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling DefaultApi.listClients, must be bigger than or equal to 1.');
        }

        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DefaultApi.listClients, must be bigger than or equal to 1.');
        }


        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($filters_anonymous !== null) {
            if('form' === 'form' && is_array($filters_anonymous)) {
                foreach($filters_anonymous as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filters[anonymous]'] = $filters_anonymous;
            }
        }
        // query params
        if ($filters_first_name !== null) {
            if('form' === 'form' && is_array($filters_first_name)) {
                foreach($filters_first_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filters[firstName]'] = $filters_first_name;
            }
        }
        // query params
        if ($filters_last_name !== null) {
            if('form' === 'form' && is_array($filters_last_name)) {
                foreach($filters_last_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filters[lastName]'] = $filters_last_name;
            }
        }
        // query params
        if ($filters_email !== null) {
            if('form' === 'form' && is_array($filters_email)) {
                foreach($filters_email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filters[email]'] = $filters_email;
            }
        }
        // query params
        if ($filters_phone !== null) {
            if('form' === 'form' && is_array($filters_phone)) {
                foreach($filters_phone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filters[phone]'] = $filters_phone;
            }
        }

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeClientsByCustomId
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_ids Comma-delimited string with custom IDs of the Client&#39;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mergeClientsByCustomId($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
    {
        $this->mergeClientsByCustomIdWithHttpInfo($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version);
    }

    /**
     * Operation mergeClientsByCustomIdWithHttpInfo
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_ids Comma-delimited string with custom IDs of the Client&#39;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeClientsByCustomIdWithHttpInfo($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
    {
        $request = $this->mergeClientsByCustomIdRequest($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeClientsByCustomIdAsync
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_ids Comma-delimited string with custom IDs of the Client&#39;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeClientsByCustomIdAsync($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
    {
        return $this->mergeClientsByCustomIdAsyncWithHttpInfo($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeClientsByCustomIdAsyncWithHttpInfo
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_ids Comma-delimited string with custom IDs of the Client&#39;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeClientsByCustomIdAsyncWithHttpInfo($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->mergeClientsByCustomIdRequest($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeClientsByCustomId'
     *
     * @param  string $source_custom_ids Comma-delimited string with custom IDs of the Client&#39;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mergeClientsByCustomIdRequest($source_custom_ids, $target_custom_id, $accept, $content_type, $api_version)
    {
        // verify the required parameter 'source_custom_ids' is set
        if ($source_custom_ids === null || (is_array($source_custom_ids) && count($source_custom_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_custom_ids when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'target_custom_id' is set
        if ($target_custom_id === null || (is_array($target_custom_id) && count($target_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_custom_id when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling mergeClientsByCustomId'
            );
        }

        $resourcePath = '/clients/merge/from/custom-ids/{sourceCustomIDs}/to/custom-id/{targetCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($source_custom_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceCustomIDs' . '}',
                ObjectSerializer::toPathValue($source_custom_ids),
                $resourcePath
            );
        }
        // path params
        if ($target_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetCustomID' . '}',
                ObjectSerializer::toPathValue($target_custom_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClient
     *
     * Update a Client (identify by ID)
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClient($client_id, $api_version, $createa_clientin_crm_request)
    {
        $this->updateAClientWithHttpInfo($client_id, $api_version, $createa_clientin_crm_request);
    }

    /**
     * Operation updateAClientWithHttpInfo
     *
     * Update a Client (identify by ID)
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientWithHttpInfo($client_id, $api_version, $createa_clientin_crm_request)
    {
        $request = $this->updateAClientRequest($client_id, $api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientAsync
     *
     * Update a Client (identify by ID)
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientAsync($client_id, $api_version, $createa_clientin_crm_request)
    {
        return $this->updateAClientAsyncWithHttpInfo($client_id, $api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientAsyncWithHttpInfo
     *
     * Update a Client (identify by ID)
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientAsyncWithHttpInfo($client_id, $api_version, $createa_clientin_crm_request)
    {
        $returnType = '';
        $request = $this->updateAClientRequest($client_id, $api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClient'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAClientRequest($client_id, $api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling updateAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClient'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling updateAClient'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClientByCustomId
     *
     * Update a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClientByCustomId($client_custom_id, $api_version, $createa_clientin_crm_request)
    {
        $this->updateAClientByCustomIdWithHttpInfo($client_custom_id, $api_version, $createa_clientin_crm_request);
    }

    /**
     * Operation updateAClientByCustomIdWithHttpInfo
     *
     * Update a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientByCustomIdWithHttpInfo($client_custom_id, $api_version, $createa_clientin_crm_request)
    {
        $request = $this->updateAClientByCustomIdRequest($client_custom_id, $api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientByCustomIdAsync
     *
     * Update a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByCustomIdAsync($client_custom_id, $api_version, $createa_clientin_crm_request)
    {
        return $this->updateAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientByCustomIdAsyncWithHttpInfo
     *
     * Update a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $api_version, $createa_clientin_crm_request)
    {
        $returnType = '';
        $request = $this->updateAClientByCustomIdRequest($client_custom_id, $api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClientByCustomId'
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAClientByCustomIdRequest($client_custom_id, $api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'client_custom_id' is set
        if ($client_custom_id === null || (is_array($client_custom_id) && count($client_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_custom_id when calling updateAClientByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClientByCustomId'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling updateAClientByCustomId'
            );
        }

        $resourcePath = '/clients/by-customid/{clientCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientCustomID' . '}',
                ObjectSerializer::toPathValue($client_custom_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClientByEmail
     *
     * Update a Client (identify by email)
     *
     * @param  string $client_email The Client&#39;s email address (required)
     * @param  string $api_version api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClientByEmail($client_email, $api_version, $createa_clientin_crm_request)
    {
        $this->updateAClientByEmailWithHttpInfo($client_email, $api_version, $createa_clientin_crm_request);
    }

    /**
     * Operation updateAClientByEmailWithHttpInfo
     *
     * Update a Client (identify by email)
     *
     * @param  string $client_email The Client&#39;s email address (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \Synerise\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientByEmailWithHttpInfo($client_email, $api_version, $createa_clientin_crm_request)
    {
        $request = $this->updateAClientByEmailRequest($client_email, $api_version, $createa_clientin_crm_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ApiClient\Model\HTTP400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientByEmailAsync
     *
     * Update a Client (identify by email)
     *
     * @param  string $client_email The Client&#39;s email address (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByEmailAsync($client_email, $api_version, $createa_clientin_crm_request)
    {
        return $this->updateAClientByEmailAsyncWithHttpInfo($client_email, $api_version, $createa_clientin_crm_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientByEmailAsyncWithHttpInfo
     *
     * Update a Client (identify by email)
     *
     * @param  string $client_email The Client&#39;s email address (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByEmailAsyncWithHttpInfo($client_email, $api_version, $createa_clientin_crm_request)
    {
        $returnType = '';
        $request = $this->updateAClientByEmailRequest($client_email, $api_version, $createa_clientin_crm_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClientByEmail'
     *
     * @param  string $client_email The Client&#39;s email address (required)
     * @param  string $api_version (required)
     * @param  \Synerise\ApiClient\Model\CreateaClientinCRMRequest $createa_clientin_crm_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAClientByEmailRequest($client_email, $api_version, $createa_clientin_crm_request)
    {
        // verify the required parameter 'client_email' is set
        if ($client_email === null || (is_array($client_email) && count($client_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_email when calling updateAClientByEmail'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClientByEmail'
            );
        }
        // verify the required parameter 'createa_clientin_crm_request' is set
        if ($createa_clientin_crm_request === null || (is_array($createa_clientin_crm_request) && count($createa_clientin_crm_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createa_clientin_crm_request when calling updateAClientByEmail'
            );
        }

        $resourcePath = '/clients/by-email/{clientEmail}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_email !== null) {
            $resourcePath = str_replace(
                '{' . 'clientEmail' . '}',
                ObjectSerializer::toPathValue($client_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createa_clientin_crm_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createa_clientin_crm_request));
            } else {
                $httpBody = $createa_clientin_crm_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
