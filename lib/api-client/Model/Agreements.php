<?php
/**
 * Agreements
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Synerise\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * apiV4
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ApiClient\Model;

use \ArrayAccess;
use \Synerise\ApiClient\ObjectSerializer;

/**
 * Agreements Class Doc Comment
 *
 * @category Class
 * @description This object contains the marketing agreements of the Client.  You can also pass the values as strings (&#x60;\&quot;true\&quot;&#x60;;&#x60;\&quot;TRUE\&quot;&#x60;;&#x60;\&quot;True\&quot;&#x60;/&#x60;\&quot;false\&quot;&#x60;;&#x60;\&quot;FALSE\&quot;&#x60;;&#x60;\&quot;False\&quot;&#x60;) or integers (&#x60;1&#x60; for true and &#x60;0&#x60; for false).
 * @package  Synerise\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Agreements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Agreements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'bool',
        'sms' => 'bool',
        'push' => 'bool',
        'webpush' => 'bool',
        'bluetooth' => 'bool',
        'rfid' => 'bool',
        'wifi' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'sms' => null,
        'push' => null,
        'webpush' => null,
        'bluetooth' => null,
        'rfid' => null,
        'wifi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'sms' => 'sms',
        'push' => 'push',
        'webpush' => 'webpush',
        'bluetooth' => 'bluetooth',
        'rfid' => 'rfid',
        'wifi' => 'wifi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'sms' => 'setSms',
        'push' => 'setPush',
        'webpush' => 'setWebpush',
        'bluetooth' => 'setBluetooth',
        'rfid' => 'setRfid',
        'wifi' => 'setWifi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'sms' => 'getSms',
        'push' => 'getPush',
        'webpush' => 'getWebpush',
        'bluetooth' => 'getBluetooth',
        'rfid' => 'getRfid',
        'wifi' => 'getWifi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? false;
        $this->container['sms'] = $data['sms'] ?? false;
        $this->container['push'] = $data['push'] ?? false;
        $this->container['webpush'] = $data['webpush'] ?? false;
        $this->container['bluetooth'] = $data['bluetooth'] ?? false;
        $this->container['rfid'] = $data['rfid'] ?? false;
        $this->container['wifi'] = $data['wifi'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return bool|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param bool|null $email Permission to receive marketing information by e-mail
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return bool|null
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param bool|null $sms Permission to receive marketing information by SMS
     *
     * @return self
     */
    public function setSms($sms)
    {
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets push
     *
     * @return bool|null
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param bool|null $push Permission to receive push notifications
     *
     * @return self
     */
    public function setPush($push)
    {
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets webpush
     *
     * @return bool|null
     */
    public function getWebpush()
    {
        return $this->container['webpush'];
    }

    /**
     * Sets webpush
     *
     * @param bool|null $webpush Permission to receive webpush notifications
     *
     * @return self
     */
    public function setWebpush($webpush)
    {
        $this->container['webpush'] = $webpush;

        return $this;
    }

    /**
     * Gets bluetooth
     *
     * @return bool|null
     */
    public function getBluetooth()
    {
        return $this->container['bluetooth'];
    }

    /**
     * Sets bluetooth
     *
     * @param bool|null $bluetooth Permission to use Bluetooth data for marketing purposes
     *
     * @return self
     */
    public function setBluetooth($bluetooth)
    {
        $this->container['bluetooth'] = $bluetooth;

        return $this;
    }

    /**
     * Gets rfid
     *
     * @return bool|null
     */
    public function getRfid()
    {
        return $this->container['rfid'];
    }

    /**
     * Sets rfid
     *
     * @param bool|null $rfid Permission to use RFID for marketing purposes
     *
     * @return self
     */
    public function setRfid($rfid)
    {
        $this->container['rfid'] = $rfid;

        return $this;
    }

    /**
     * Gets wifi
     *
     * @return bool|null
     */
    public function getWifi()
    {
        return $this->container['wifi'];
    }

    /**
     * Sets wifi
     *
     * @param bool|null $wifi Permission to use WiFi for marketing purposes
     *
     * @return self
     */
    public function setWifi($wifi)
    {
        $this->container['wifi'] = $wifi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


