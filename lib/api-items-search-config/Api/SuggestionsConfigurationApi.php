<?php
/**
 * SuggestionsConfigurationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search configuration API
 *
 * Synerise search configuration API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchConfigApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\ItemsSearchConfigApiClient\ApiException;
use Synerise\ItemsSearchConfigApiClient\Configuration;
use Synerise\ItemsSearchConfigApiClient\HeaderSelector;
use Synerise\ItemsSearchConfigApiClient\ObjectSerializer;

/**
 * SuggestionsConfigurationApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SuggestionsConfigurationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteSuggestionIndexConfig' => [
            'application/json',
        ],
        'getSuggestionsIndex' => [
            'application/json',
        ],
        'getSuggestionsIndexState' => [
            'application/json',
        ],
        'getSuggestionsIndices' => [
            'application/json',
        ],
        'postSuggestionIndexConfig' => [
            'application/json',
        ],
        'putSuggestionIndexConfig' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteSuggestionIndexConfig
     *
     * Delete suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSuggestionIndexConfig($index_id, string $contentType = self::contentTypes['deleteSuggestionIndexConfig'][0])
    {
        $this->deleteSuggestionIndexConfigWithHttpInfo($index_id, $contentType);
    }

    /**
     * Operation deleteSuggestionIndexConfigWithHttpInfo
     *
     * Delete suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSuggestionIndexConfigWithHttpInfo($index_id, string $contentType = self::contentTypes['deleteSuggestionIndexConfig'][0])
    {
        $request = $this->deleteSuggestionIndexConfigRequest($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSuggestionIndexConfigAsync
     *
     * Delete suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSuggestionIndexConfigAsync($index_id, string $contentType = self::contentTypes['deleteSuggestionIndexConfig'][0])
    {
        return $this->deleteSuggestionIndexConfigAsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSuggestionIndexConfigAsyncWithHttpInfo
     *
     * Delete suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSuggestionIndexConfigAsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['deleteSuggestionIndexConfig'][0])
    {
        $returnType = '';
        $request = $this->deleteSuggestionIndexConfigRequest($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSuggestionIndexConfig'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSuggestionIndexConfigRequest($index_id, string $contentType = self::contentTypes['deleteSuggestionIndexConfig'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling deleteSuggestionIndexConfig'
            );
        }


        $resourcePath = '/search/v2/suggestion-indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuggestionsIndex
     *
     * Get suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndex'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getSuggestionsIndex($index_id, string $contentType = self::contentTypes['getSuggestionsIndex'][0])
    {
        list($response) = $this->getSuggestionsIndexWithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation getSuggestionsIndexWithHttpInfo
     *
     * Get suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndex'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsIndexWithHttpInfo($index_id, string $contentType = self::contentTypes['getSuggestionsIndex'][0])
    {
        $request = $this->getSuggestionsIndexRequest($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuggestionsIndexAsync
     *
     * Get suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndexAsync($index_id, string $contentType = self::contentTypes['getSuggestionsIndex'][0])
    {
        return $this->getSuggestionsIndexAsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsIndexAsyncWithHttpInfo
     *
     * Get suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndexAsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['getSuggestionsIndex'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
        $request = $this->getSuggestionsIndexRequest($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuggestionsIndex'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSuggestionsIndexRequest($index_id, string $contentType = self::contentTypes['getSuggestionsIndex'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getSuggestionsIndex'
            );
        }


        $resourcePath = '/search/v2/suggestion-indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuggestionsIndexState
     *
     * Get suggestion index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndexState'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getSuggestionsIndexState($index_id, string $contentType = self::contentTypes['getSuggestionsIndexState'][0])
    {
        list($response) = $this->getSuggestionsIndexStateWithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation getSuggestionsIndexStateWithHttpInfo
     *
     * Get suggestion index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndexState'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsIndexStateWithHttpInfo($index_id, string $contentType = self::contentTypes['getSuggestionsIndexState'][0])
    {
        $request = $this->getSuggestionsIndexStateRequest($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuggestionsIndexStateAsync
     *
     * Get suggestion index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndexState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndexStateAsync($index_id, string $contentType = self::contentTypes['getSuggestionsIndexState'][0])
    {
        return $this->getSuggestionsIndexStateAsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsIndexStateAsyncWithHttpInfo
     *
     * Get suggestion index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndexState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndexStateAsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['getSuggestionsIndexState'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema';
        $request = $this->getSuggestionsIndexStateRequest($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuggestionsIndexState'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndexState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSuggestionsIndexStateRequest($index_id, string $contentType = self::contentTypes['getSuggestionsIndexState'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getSuggestionsIndexState'
            );
        }


        $resourcePath = '/search/v2/suggestion-indices/{indexId}/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuggestionsIndices
     *
     * Get suggestion indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndices'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getSuggestionsIndices($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, string $contentType = self::contentTypes['getSuggestionsIndices'][0])
    {
        list($response) = $this->getSuggestionsIndicesWithHttpInfo($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $contentType);
        return $response;
    }

    /**
     * Operation getSuggestionsIndicesWithHttpInfo
     *
     * Get suggestion indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndices'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsIndicesWithHttpInfo($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, string $contentType = self::contentTypes['getSuggestionsIndices'][0])
    {
        $request = $this->getSuggestionsIndicesRequest($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuggestionsIndicesAsync
     *
     * Get suggestion indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndicesAsync($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, string $contentType = self::contentTypes['getSuggestionsIndices'][0])
    {
        return $this->getSuggestionsIndicesAsyncWithHttpInfo($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsIndicesAsyncWithHttpInfo
     *
     * Get suggestion indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuggestionsIndicesAsyncWithHttpInfo($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, string $contentType = self::contentTypes['getSuggestionsIndices'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\GetSuggestionIndicesResponseSchema';
        $request = $this->getSuggestionsIndicesRequest($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuggestionsIndices'
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuggestionsIndices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSuggestionsIndicesRequest($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, string $contentType = self::contentTypes['getSuggestionsIndices'][0])
    {


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SuggestionsConfigurationApi.getSuggestionsIndices, must be smaller than or equal to 1000.');
        }
        






        $resourcePath = '/search/v2/suggestion-indices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_meta,
            'includeMeta', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSuggestionIndexConfig
     *
     * Create suggestion index
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function postSuggestionIndexConfig($post_suggestion_index_config_request = null, string $contentType = self::contentTypes['postSuggestionIndexConfig'][0])
    {
        list($response) = $this->postSuggestionIndexConfigWithHttpInfo($post_suggestion_index_config_request, $contentType);
        return $response;
    }

    /**
     * Operation postSuggestionIndexConfigWithHttpInfo
     *
     * Create suggestion index
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSuggestionIndexConfigWithHttpInfo($post_suggestion_index_config_request = null, string $contentType = self::contentTypes['postSuggestionIndexConfig'][0])
    {
        $request = $this->postSuggestionIndexConfigRequest($post_suggestion_index_config_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSuggestionIndexConfigAsync
     *
     * Create suggestion index
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSuggestionIndexConfigAsync($post_suggestion_index_config_request = null, string $contentType = self::contentTypes['postSuggestionIndexConfig'][0])
    {
        return $this->postSuggestionIndexConfigAsyncWithHttpInfo($post_suggestion_index_config_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSuggestionIndexConfigAsyncWithHttpInfo
     *
     * Create suggestion index
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSuggestionIndexConfigAsyncWithHttpInfo($post_suggestion_index_config_request = null, string $contentType = self::contentTypes['postSuggestionIndexConfig'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
        $request = $this->postSuggestionIndexConfigRequest($post_suggestion_index_config_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSuggestionIndexConfig'
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postSuggestionIndexConfigRequest($post_suggestion_index_config_request = null, string $contentType = self::contentTypes['postSuggestionIndexConfig'][0])
    {



        $resourcePath = '/search/v2/suggestion-indices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_suggestion_index_config_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_suggestion_index_config_request));
            } else {
                $httpBody = $post_suggestion_index_config_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putSuggestionIndexConfig
     *
     * Create/replace suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function putSuggestionIndexConfig($index_id, $post_suggestion_index_config_request = null, string $contentType = self::contentTypes['putSuggestionIndexConfig'][0])
    {
        list($response) = $this->putSuggestionIndexConfigWithHttpInfo($index_id, $post_suggestion_index_config_request, $contentType);
        return $response;
    }

    /**
     * Operation putSuggestionIndexConfigWithHttpInfo
     *
     * Create/replace suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putSuggestionIndexConfigWithHttpInfo($index_id, $post_suggestion_index_config_request = null, string $contentType = self::contentTypes['putSuggestionIndexConfig'][0])
    {
        $request = $this->putSuggestionIndexConfigRequest($index_id, $post_suggestion_index_config_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putSuggestionIndexConfigAsync
     *
     * Create/replace suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putSuggestionIndexConfigAsync($index_id, $post_suggestion_index_config_request = null, string $contentType = self::contentTypes['putSuggestionIndexConfig'][0])
    {
        return $this->putSuggestionIndexConfigAsyncWithHttpInfo($index_id, $post_suggestion_index_config_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putSuggestionIndexConfigAsyncWithHttpInfo
     *
     * Create/replace suggestion index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putSuggestionIndexConfigAsyncWithHttpInfo($index_id, $post_suggestion_index_config_request = null, string $contentType = self::contentTypes['putSuggestionIndexConfig'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SuggestionIndexSchema';
        $request = $this->putSuggestionIndexConfigRequest($index_id, $post_suggestion_index_config_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putSuggestionIndexConfig'
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostSuggestionIndexConfigRequest $post_suggestion_index_config_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putSuggestionIndexConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putSuggestionIndexConfigRequest($index_id, $post_suggestion_index_config_request = null, string $contentType = self::contentTypes['putSuggestionIndexConfig'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling putSuggestionIndexConfig'
            );
        }



        $resourcePath = '/search/v2/suggestion-indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_suggestion_index_config_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_suggestion_index_config_request));
            } else {
                $httpBody = $post_suggestion_index_config_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
