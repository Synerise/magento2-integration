<?php
/**
 * SearchConfigurationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search configuration API
 *
 * Synerise search configuration API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchConfigApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\ItemsSearchConfigApiClient\ApiException;
use Synerise\ItemsSearchConfigApiClient\Configuration;
use Synerise\ItemsSearchConfigApiClient\HeaderSelector;
use Synerise\ItemsSearchConfigApiClient\ObjectSerializer;

/**
 * SearchConfigurationApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchConfigurationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'changeCatalogStateForSearch' => [
            'application/json',
        ],
        'checkCatalogStateForSearch' => [
            'application/json',
        ],
        'checkCatalogStatesForSearch' => [
            'application/json',
        ],
        'copyIndex' => [
            'application/json',
        ],
        'deleteIndexConfigV2' => [
            'application/json',
        ],
        'duplicateIndexV2Get' => [
            'application/json',
        ],
        'duplicateIndexV2Post' => [
            'application/json',
        ],
        'getIndexConfigV2' => [
            'application/json',
        ],
        'getIndexDependenciesV2' => [
            'application/json',
        ],
        'getIndexStateV2' => [
            'application/json',
        ],
        'getIndicesConfigsV2' => [
            'application/json',
        ],
        'getSupportedLanguagesV2' => [
            'application/json',
        ],
        'postIndexConfigV2' => [
            'application/json',
        ],
        'updateIndexConfigV2' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeCatalogStateForSearch
     *
     * Change catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $state_operation Operation to change state of items catalog for search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function changeCatalogStateForSearch($items_catalog_id, $state_operation, string $contentType = self::contentTypes['changeCatalogStateForSearch'][0])
    {
        list($response) = $this->changeCatalogStateForSearchWithHttpInfo($items_catalog_id, $state_operation, $contentType);
        return $response;
    }

    /**
     * Operation changeCatalogStateForSearchWithHttpInfo
     *
     * Change catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $state_operation Operation to change state of items catalog for search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeCatalogStateForSearchWithHttpInfo($items_catalog_id, $state_operation, string $contentType = self::contentTypes['changeCatalogStateForSearch'][0])
    {
        $request = $this->changeCatalogStateForSearchRequest($items_catalog_id, $state_operation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeCatalogStateForSearchAsync
     *
     * Change catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $state_operation Operation to change state of items catalog for search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeCatalogStateForSearchAsync($items_catalog_id, $state_operation, string $contentType = self::contentTypes['changeCatalogStateForSearch'][0])
    {
        return $this->changeCatalogStateForSearchAsyncWithHttpInfo($items_catalog_id, $state_operation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeCatalogStateForSearchAsyncWithHttpInfo
     *
     * Change catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $state_operation Operation to change state of items catalog for search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeCatalogStateForSearchAsyncWithHttpInfo($items_catalog_id, $state_operation, string $contentType = self::contentTypes['changeCatalogStateForSearch'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema';
        $request = $this->changeCatalogStateForSearchRequest($items_catalog_id, $state_operation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeCatalogStateForSearch'
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $state_operation Operation to change state of items catalog for search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeCatalogStateForSearchRequest($items_catalog_id, $state_operation, string $contentType = self::contentTypes['changeCatalogStateForSearch'][0])
    {

        // verify the required parameter 'items_catalog_id' is set
        if ($items_catalog_id === null || (is_array($items_catalog_id) && count($items_catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items_catalog_id when calling changeCatalogStateForSearch'
            );
        }

        // verify the required parameter 'state_operation' is set
        if ($state_operation === null || (is_array($state_operation) && count($state_operation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state_operation when calling changeCatalogStateForSearch'
            );
        }


        $resourcePath = '/search/v2/catalogs/{itemsCatalogId}/search/{stateOperation}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($items_catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemsCatalogId' . '}',
                ObjectSerializer::toPathValue($items_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($state_operation !== null) {
            $resourcePath = str_replace(
                '{' . 'stateOperation' . '}',
                ObjectSerializer::toPathValue($state_operation),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkCatalogStateForSearch
     *
     * Check catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function checkCatalogStateForSearch($items_catalog_id, string $contentType = self::contentTypes['checkCatalogStateForSearch'][0])
    {
        list($response) = $this->checkCatalogStateForSearchWithHttpInfo($items_catalog_id, $contentType);
        return $response;
    }

    /**
     * Operation checkCatalogStateForSearchWithHttpInfo
     *
     * Check catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkCatalogStateForSearchWithHttpInfo($items_catalog_id, string $contentType = self::contentTypes['checkCatalogStateForSearch'][0])
    {
        $request = $this->checkCatalogStateForSearchRequest($items_catalog_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkCatalogStateForSearchAsync
     *
     * Check catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkCatalogStateForSearchAsync($items_catalog_id, string $contentType = self::contentTypes['checkCatalogStateForSearch'][0])
    {
        return $this->checkCatalogStateForSearchAsyncWithHttpInfo($items_catalog_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkCatalogStateForSearchAsyncWithHttpInfo
     *
     * Check catalog state
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkCatalogStateForSearchAsyncWithHttpInfo($items_catalog_id, string $contentType = self::contentTypes['checkCatalogStateForSearch'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema';
        $request = $this->checkCatalogStateForSearchRequest($items_catalog_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkCatalogStateForSearch'
     *
     * @param  string $items_catalog_id Items catalog id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStateForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkCatalogStateForSearchRequest($items_catalog_id, string $contentType = self::contentTypes['checkCatalogStateForSearch'][0])
    {

        // verify the required parameter 'items_catalog_id' is set
        if ($items_catalog_id === null || (is_array($items_catalog_id) && count($items_catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items_catalog_id when calling checkCatalogStateForSearch'
            );
        }


        $resourcePath = '/search/v2/catalogs/{itemsCatalogId}/search/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($items_catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemsCatalogId' . '}',
                ObjectSerializer::toPathValue($items_catalog_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkCatalogStatesForSearch
     *
     * Check catalogs states
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStatesForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function checkCatalogStatesForSearch(string $contentType = self::contentTypes['checkCatalogStatesForSearch'][0])
    {
        list($response) = $this->checkCatalogStatesForSearchWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation checkCatalogStatesForSearchWithHttpInfo
     *
     * Check catalogs states
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStatesForSearch'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkCatalogStatesForSearchWithHttpInfo(string $contentType = self::contentTypes['checkCatalogStatesForSearch'][0])
    {
        $request = $this->checkCatalogStatesForSearchRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkCatalogStatesForSearchAsync
     *
     * Check catalogs states
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStatesForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkCatalogStatesForSearchAsync(string $contentType = self::contentTypes['checkCatalogStatesForSearch'][0])
    {
        return $this->checkCatalogStatesForSearchAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkCatalogStatesForSearchAsyncWithHttpInfo
     *
     * Check catalogs states
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStatesForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkCatalogStatesForSearchAsyncWithHttpInfo(string $contentType = self::contentTypes['checkCatalogStatesForSearch'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\CatalogStateResponseSchema[]';
        $request = $this->checkCatalogStatesForSearchRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkCatalogStatesForSearch'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkCatalogStatesForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkCatalogStatesForSearchRequest(string $contentType = self::contentTypes['checkCatalogStatesForSearch'][0])
    {


        $resourcePath = '/search/v2/catalogs/search/states';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyIndex
     *
     * Copy index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\CopyIndexRequest $copy_index_request Request for copying index config with optional rules and copying synonyms (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyIndex'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function copyIndex($index_id, $copy_index_request, string $contentType = self::contentTypes['copyIndex'][0])
    {
        list($response) = $this->copyIndexWithHttpInfo($index_id, $copy_index_request, $contentType);
        return $response;
    }

    /**
     * Operation copyIndexWithHttpInfo
     *
     * Copy index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\CopyIndexRequest $copy_index_request Request for copying index config with optional rules and copying synonyms (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyIndex'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyIndexWithHttpInfo($index_id, $copy_index_request, string $contentType = self::contentTypes['copyIndex'][0])
    {
        $request = $this->copyIndexRequest($index_id, $copy_index_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation copyIndexAsync
     *
     * Copy index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\CopyIndexRequest $copy_index_request Request for copying index config with optional rules and copying synonyms (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyIndexAsync($index_id, $copy_index_request, string $contentType = self::contentTypes['copyIndex'][0])
    {
        return $this->copyIndexAsyncWithHttpInfo($index_id, $copy_index_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyIndexAsyncWithHttpInfo
     *
     * Copy index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\CopyIndexRequest $copy_index_request Request for copying index config with optional rules and copying synonyms (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyIndexAsyncWithHttpInfo($index_id, $copy_index_request, string $contentType = self::contentTypes['copyIndex'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->copyIndexRequest($index_id, $copy_index_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyIndex'
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\CopyIndexRequest $copy_index_request Request for copying index config with optional rules and copying synonyms (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function copyIndexRequest($index_id, $copy_index_request, string $contentType = self::contentTypes['copyIndex'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling copyIndex'
            );
        }

        // verify the required parameter 'copy_index_request' is set
        if ($copy_index_request === null || (is_array($copy_index_request) && count($copy_index_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $copy_index_request when calling copyIndex'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($copy_index_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($copy_index_request));
            } else {
                $httpBody = $copy_index_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIndexConfigV2
     *
     * Delete index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIndexConfigV2($index_id, string $contentType = self::contentTypes['deleteIndexConfigV2'][0])
    {
        $this->deleteIndexConfigV2WithHttpInfo($index_id, $contentType);
    }

    /**
     * Operation deleteIndexConfigV2WithHttpInfo
     *
     * Delete index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIndexConfigV2WithHttpInfo($index_id, string $contentType = self::contentTypes['deleteIndexConfigV2'][0])
    {
        $request = $this->deleteIndexConfigV2Request($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIndexConfigV2Async
     *
     * Delete index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIndexConfigV2Async($index_id, string $contentType = self::contentTypes['deleteIndexConfigV2'][0])
    {
        return $this->deleteIndexConfigV2AsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIndexConfigV2AsyncWithHttpInfo
     *
     * Delete index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIndexConfigV2AsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['deleteIndexConfigV2'][0])
    {
        $returnType = '';
        $request = $this->deleteIndexConfigV2Request($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIndexConfigV2'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIndexConfigV2Request($index_id, string $contentType = self::contentTypes['deleteIndexConfigV2'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling deleteIndexConfigV2'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicateIndexV2Get
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Get'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function duplicateIndexV2Get($index_id, string $contentType = self::contentTypes['duplicateIndexV2Get'][0])
    {
        list($response) = $this->duplicateIndexV2GetWithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation duplicateIndexV2GetWithHttpInfo
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Get'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateIndexV2GetWithHttpInfo($index_id, string $contentType = self::contentTypes['duplicateIndexV2Get'][0])
    {
        $request = $this->duplicateIndexV2GetRequest($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation duplicateIndexV2GetAsync
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateIndexV2GetAsync($index_id, string $contentType = self::contentTypes['duplicateIndexV2Get'][0])
    {
        return $this->duplicateIndexV2GetAsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicateIndexV2GetAsyncWithHttpInfo
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateIndexV2GetAsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['duplicateIndexV2Get'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->duplicateIndexV2GetRequest($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicateIndexV2Get'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Get'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function duplicateIndexV2GetRequest($index_id, string $contentType = self::contentTypes['duplicateIndexV2Get'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling duplicateIndexV2Get'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicateIndexV2Post
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\DuplicateIndexV2PostRequest $duplicate_index_v2_post_request Request for duplicating index config with optional rules and synonyms duplication (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Post'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function duplicateIndexV2Post($index_id, $duplicate_index_v2_post_request, string $contentType = self::contentTypes['duplicateIndexV2Post'][0])
    {
        list($response) = $this->duplicateIndexV2PostWithHttpInfo($index_id, $duplicate_index_v2_post_request, $contentType);
        return $response;
    }

    /**
     * Operation duplicateIndexV2PostWithHttpInfo
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\DuplicateIndexV2PostRequest $duplicate_index_v2_post_request Request for duplicating index config with optional rules and synonyms duplication (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Post'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateIndexV2PostWithHttpInfo($index_id, $duplicate_index_v2_post_request, string $contentType = self::contentTypes['duplicateIndexV2Post'][0])
    {
        $request = $this->duplicateIndexV2PostRequest($index_id, $duplicate_index_v2_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation duplicateIndexV2PostAsync
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\DuplicateIndexV2PostRequest $duplicate_index_v2_post_request Request for duplicating index config with optional rules and synonyms duplication (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateIndexV2PostAsync($index_id, $duplicate_index_v2_post_request, string $contentType = self::contentTypes['duplicateIndexV2Post'][0])
    {
        return $this->duplicateIndexV2PostAsyncWithHttpInfo($index_id, $duplicate_index_v2_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicateIndexV2PostAsyncWithHttpInfo
     *
     * Duplicate index
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\DuplicateIndexV2PostRequest $duplicate_index_v2_post_request Request for duplicating index config with optional rules and synonyms duplication (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateIndexV2PostAsyncWithHttpInfo($index_id, $duplicate_index_v2_post_request, string $contentType = self::contentTypes['duplicateIndexV2Post'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->duplicateIndexV2PostRequest($index_id, $duplicate_index_v2_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicateIndexV2Post'
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\DuplicateIndexV2PostRequest $duplicate_index_v2_post_request Request for duplicating index config with optional rules and synonyms duplication (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['duplicateIndexV2Post'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function duplicateIndexV2PostRequest($index_id, $duplicate_index_v2_post_request, string $contentType = self::contentTypes['duplicateIndexV2Post'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling duplicateIndexV2Post'
            );
        }

        // verify the required parameter 'duplicate_index_v2_post_request' is set
        if ($duplicate_index_v2_post_request === null || (is_array($duplicate_index_v2_post_request) && count($duplicate_index_v2_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duplicate_index_v2_post_request when calling duplicateIndexV2Post'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($duplicate_index_v2_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($duplicate_index_v2_post_request));
            } else {
                $httpBody = $duplicate_index_v2_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIndexConfigV2
     *
     * Get index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getIndexConfigV2($index_id, string $contentType = self::contentTypes['getIndexConfigV2'][0])
    {
        list($response) = $this->getIndexConfigV2WithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation getIndexConfigV2WithHttpInfo
     *
     * Get index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexConfigV2WithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexConfigV2'][0])
    {
        $request = $this->getIndexConfigV2Request($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndexConfigV2Async
     *
     * Get index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexConfigV2Async($index_id, string $contentType = self::contentTypes['getIndexConfigV2'][0])
    {
        return $this->getIndexConfigV2AsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndexConfigV2AsyncWithHttpInfo
     *
     * Get index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexConfigV2AsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexConfigV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->getIndexConfigV2Request($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndexConfigV2'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIndexConfigV2Request($index_id, string $contentType = self::contentTypes['getIndexConfigV2'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getIndexConfigV2'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIndexDependenciesV2
     *
     * Get index dependencies
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexDependenciesV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getIndexDependenciesV2($index_id, string $contentType = self::contentTypes['getIndexDependenciesV2'][0])
    {
        list($response) = $this->getIndexDependenciesV2WithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation getIndexDependenciesV2WithHttpInfo
     *
     * Get index dependencies
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexDependenciesV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexDependenciesV2WithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexDependenciesV2'][0])
    {
        $request = $this->getIndexDependenciesV2Request($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndexDependenciesV2Async
     *
     * Get index dependencies
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexDependenciesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexDependenciesV2Async($index_id, string $contentType = self::contentTypes['getIndexDependenciesV2'][0])
    {
        return $this->getIndexDependenciesV2AsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndexDependenciesV2AsyncWithHttpInfo
     *
     * Get index dependencies
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexDependenciesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexDependenciesV2AsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexDependenciesV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexDependenciesResponseSchema';
        $request = $this->getIndexDependenciesV2Request($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndexDependenciesV2'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexDependenciesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIndexDependenciesV2Request($index_id, string $contentType = self::contentTypes['getIndexDependenciesV2'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getIndexDependenciesV2'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/dependencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIndexStateV2
     *
     * Get index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexStateV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getIndexStateV2($index_id, string $contentType = self::contentTypes['getIndexStateV2'][0])
    {
        list($response) = $this->getIndexStateV2WithHttpInfo($index_id, $contentType);
        return $response;
    }

    /**
     * Operation getIndexStateV2WithHttpInfo
     *
     * Get index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexStateV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexStateV2WithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexStateV2'][0])
    {
        $request = $this->getIndexStateV2Request($index_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndexStateV2Async
     *
     * Get index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexStateV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexStateV2Async($index_id, string $contentType = self::contentTypes['getIndexStateV2'][0])
    {
        return $this->getIndexStateV2AsyncWithHttpInfo($index_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndexStateV2AsyncWithHttpInfo
     *
     * Get index state
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexStateV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexStateV2AsyncWithHttpInfo($index_id, string $contentType = self::contentTypes['getIndexStateV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\IndexStateResponseSchema';
        $request = $this->getIndexStateV2Request($index_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndexStateV2'
     *
     * @param  string $index_id ID of the index (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndexStateV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIndexStateV2Request($index_id, string $contentType = self::contentTypes['getIndexStateV2'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling getIndexStateV2'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIndicesConfigsV2
     *
     * Get configurations of all indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  bool $exclude_ab_tests Only indices not involved in currently running AB tests will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndicesConfigsV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getIndicesConfigsV2($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, $exclude_ab_tests = null, string $contentType = self::contentTypes['getIndicesConfigsV2'][0])
    {
        list($response) = $this->getIndicesConfigsV2WithHttpInfo($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $exclude_ab_tests, $contentType);
        return $response;
    }

    /**
     * Operation getIndicesConfigsV2WithHttpInfo
     *
     * Get configurations of all indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  bool $exclude_ab_tests Only indices not involved in currently running AB tests will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndicesConfigsV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndicesConfigsV2WithHttpInfo($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, $exclude_ab_tests = null, string $contentType = self::contentTypes['getIndicesConfigsV2'][0])
    {
        $request = $this->getIndicesConfigsV2Request($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $exclude_ab_tests, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndicesConfigsV2Async
     *
     * Get configurations of all indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  bool $exclude_ab_tests Only indices not involved in currently running AB tests will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndicesConfigsV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndicesConfigsV2Async($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, $exclude_ab_tests = null, string $contentType = self::contentTypes['getIndicesConfigsV2'][0])
    {
        return $this->getIndicesConfigsV2AsyncWithHttpInfo($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $exclude_ab_tests, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndicesConfigsV2AsyncWithHttpInfo
     *
     * Get configurations of all indices
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  bool $exclude_ab_tests Only indices not involved in currently running AB tests will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndicesConfigsV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndicesConfigsV2AsyncWithHttpInfo($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, $exclude_ab_tests = null, string $contentType = self::contentTypes['getIndicesConfigsV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\PaginatedSearchConfigsSchema';
        $request = $this->getIndicesConfigsV2Request($page, $limit, $sort_by, $ordering, $include_meta, $name, $query, $exclude_ab_tests, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndicesConfigsV2'
     *
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 1000)
     * @param  string $sort_by Name of the attribute by which the data will be sorted (optional)
     * @param  string $ordering Sorting order (optional, default to 'desc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  string $name Deprecated parameter. If &#x60;query&#x60; is provided, this parameter is ignored.     If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. (optional) (deprecated)
     * @param  string $query If an index has an &#x60;id&#x60; equal to the value of this parameter, only that index will be retrieved. Otherwise, all indices containing this value in their &#x60;name&#x60; will be retrieved. This parameter replaces the deprecated &#x60;name&#x60; parameter. (optional)
     * @param  bool $exclude_ab_tests Only indices not involved in currently running AB tests will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIndicesConfigsV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIndicesConfigsV2Request($page = 1, $limit = 1000, $sort_by = null, $ordering = 'desc', $include_meta = false, $name = null, $query = null, $exclude_ab_tests = null, string $contentType = self::contentTypes['getIndicesConfigsV2'][0])
    {


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SearchConfigurationApi.getIndicesConfigsV2, must be smaller than or equal to 1000.');
        }
        







        $resourcePath = '/search/v2/indices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_meta,
            'includeMeta', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_ab_tests,
            'excludeAbTests', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupportedLanguagesV2
     *
     * Get supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedLanguagesV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function getSupportedLanguagesV2(string $contentType = self::contentTypes['getSupportedLanguagesV2'][0])
    {
        list($response) = $this->getSupportedLanguagesV2WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSupportedLanguagesV2WithHttpInfo
     *
     * Get supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedLanguagesV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupportedLanguagesV2WithHttpInfo(string $contentType = self::contentTypes['getSupportedLanguagesV2'][0])
    {
        $request = $this->getSupportedLanguagesV2Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupportedLanguagesV2Async
     *
     * Get supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedLanguagesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedLanguagesV2Async(string $contentType = self::contentTypes['getSupportedLanguagesV2'][0])
    {
        return $this->getSupportedLanguagesV2AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupportedLanguagesV2AsyncWithHttpInfo
     *
     * Get supported languages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedLanguagesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedLanguagesV2AsyncWithHttpInfo(string $contentType = self::contentTypes['getSupportedLanguagesV2'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->getSupportedLanguagesV2Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupportedLanguagesV2'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedLanguagesV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupportedLanguagesV2Request(string $contentType = self::contentTypes['getSupportedLanguagesV2'][0])
    {


        $resourcePath = '/search/v2/supported-languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postIndexConfigV2
     *
     * Post index configuration
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function postIndexConfigV2($post_index_config_v2_request, string $contentType = self::contentTypes['postIndexConfigV2'][0])
    {
        list($response) = $this->postIndexConfigV2WithHttpInfo($post_index_config_v2_request, $contentType);
        return $response;
    }

    /**
     * Operation postIndexConfigV2WithHttpInfo
     *
     * Post index configuration
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postIndexConfigV2WithHttpInfo($post_index_config_v2_request, string $contentType = self::contentTypes['postIndexConfigV2'][0])
    {
        $request = $this->postIndexConfigV2Request($post_index_config_v2_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postIndexConfigV2Async
     *
     * Post index configuration
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIndexConfigV2Async($post_index_config_v2_request, string $contentType = self::contentTypes['postIndexConfigV2'][0])
    {
        return $this->postIndexConfigV2AsyncWithHttpInfo($post_index_config_v2_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postIndexConfigV2AsyncWithHttpInfo
     *
     * Post index configuration
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postIndexConfigV2AsyncWithHttpInfo($post_index_config_v2_request, string $contentType = self::contentTypes['postIndexConfigV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->postIndexConfigV2Request($post_index_config_v2_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postIndexConfigV2'
     *
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postIndexConfigV2Request($post_index_config_v2_request, string $contentType = self::contentTypes['postIndexConfigV2'][0])
    {

        // verify the required parameter 'post_index_config_v2_request' is set
        if ($post_index_config_v2_request === null || (is_array($post_index_config_v2_request) && count($post_index_config_v2_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_index_config_v2_request when calling postIndexConfigV2'
            );
        }


        $resourcePath = '/search/v2/indices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_index_config_v2_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_index_config_v2_request));
            } else {
                $httpBody = $post_index_config_v2_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIndexConfigV2
     *
     * Update index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error
     */
    public function updateIndexConfigV2($index_id, $post_index_config_v2_request, string $contentType = self::contentTypes['updateIndexConfigV2'][0])
    {
        list($response) = $this->updateIndexConfigV2WithHttpInfo($index_id, $post_index_config_v2_request, $contentType);
        return $response;
    }

    /**
     * Operation updateIndexConfigV2WithHttpInfo
     *
     * Update index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchConfigApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema|\Synerise\ItemsSearchConfigApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIndexConfigV2WithHttpInfo($index_id, $post_index_config_v2_request, string $contentType = self::contentTypes['updateIndexConfigV2'][0])
    {
        $request = $this->updateIndexConfigV2Request($index_id, $post_index_config_v2_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchConfigApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchConfigApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchConfigApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIndexConfigV2Async
     *
     * Update index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIndexConfigV2Async($index_id, $post_index_config_v2_request, string $contentType = self::contentTypes['updateIndexConfigV2'][0])
    {
        return $this->updateIndexConfigV2AsyncWithHttpInfo($index_id, $post_index_config_v2_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIndexConfigV2AsyncWithHttpInfo
     *
     * Update index configuration
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIndexConfigV2AsyncWithHttpInfo($index_id, $post_index_config_v2_request, string $contentType = self::contentTypes['updateIndexConfigV2'][0])
    {
        $returnType = '\Synerise\ItemsSearchConfigApiClient\Model\SearchConfigSchema';
        $request = $this->updateIndexConfigV2Request($index_id, $post_index_config_v2_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIndexConfigV2'
     *
     * @param  string $index_id ID of the index (required)
     * @param  \Synerise\ItemsSearchConfigApiClient\Model\PostIndexConfigV2Request $post_index_config_v2_request Request for posting search configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIndexConfigV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIndexConfigV2Request($index_id, $post_index_config_v2_request, string $contentType = self::contentTypes['updateIndexConfigV2'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling updateIndexConfigV2'
            );
        }

        // verify the required parameter 'post_index_config_v2_request' is set
        if ($post_index_config_v2_request === null || (is_array($post_index_config_v2_request) && count($post_index_config_v2_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_index_config_v2_request when calling updateIndexConfigV2'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_index_config_v2_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_index_config_v2_request));
            } else {
                $httpBody = $post_index_config_v2_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
