<?php
/**
 * Suggestions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search configuration API
 *
 * Synerise search configuration API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchConfigApiClient\Model;

use \ArrayAccess;
use \Synerise\ItemsSearchConfigApiClient\ObjectSerializer;

/**
 * Suggestions Class Doc Comment
 *
 * @category Class
 * @description Controls manner in which suggestions are generated
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Suggestions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Suggestions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'smoothing_model' => 'string',
        'gram_size' => 'int',
        'max_errors' => 'int',
        'min_word_length' => 'int',
        'use_always' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'smoothing_model' => null,
        'gram_size' => null,
        'max_errors' => null,
        'min_word_length' => null,
        'use_always' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'smoothing_model' => false,
        'gram_size' => false,
        'max_errors' => false,
        'min_word_length' => false,
        'use_always' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'smoothing_model' => 'smoothingModel',
        'gram_size' => 'gramSize',
        'max_errors' => 'maxErrors',
        'min_word_length' => 'minWordLength',
        'use_always' => 'useAlways'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'smoothing_model' => 'setSmoothingModel',
        'gram_size' => 'setGramSize',
        'max_errors' => 'setMaxErrors',
        'min_word_length' => 'setMinWordLength',
        'use_always' => 'setUseAlways'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'smoothing_model' => 'getSmoothingModel',
        'gram_size' => 'getGramSize',
        'max_errors' => 'getMaxErrors',
        'min_word_length' => 'getMinWordLength',
        'use_always' => 'getUseAlways'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SMOOTHING_MODEL_POPULARITY = 'Popularity';
    public const SMOOTHING_MODEL_ACCURACY = 'Accuracy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmoothingModelAllowableValues()
    {
        return [
            self::SMOOTHING_MODEL_POPULARITY,
            self::SMOOTHING_MODEL_ACCURACY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('smoothing_model', $data ?? [], null);
        $this->setIfExists('gram_size', $data ?? [], 3);
        $this->setIfExists('max_errors', $data ?? [], 2);
        $this->setIfExists('min_word_length', $data ?? [], 4);
        $this->setIfExists('use_always', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSmoothingModelAllowableValues();
        if (!is_null($this->container['smoothing_model']) && !in_array($this->container['smoothing_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'smoothing_model', must be one of '%s'",
                $this->container['smoothing_model'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gram_size']) && ($this->container['gram_size'] > 10)) {
            $invalidProperties[] = "invalid value for 'gram_size', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['gram_size']) && ($this->container['gram_size'] < 1)) {
            $invalidProperties[] = "invalid value for 'gram_size', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_errors']) && ($this->container['max_errors'] > 5)) {
            $invalidProperties[] = "invalid value for 'max_errors', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['max_errors']) && ($this->container['max_errors'] < 1)) {
            $invalidProperties[] = "invalid value for 'max_errors', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['min_word_length']) && ($this->container['min_word_length'] < 1)) {
            $invalidProperties[] = "invalid value for 'min_word_length', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets smoothing_model
     *
     * @return string|null
     */
    public function getSmoothingModel()
    {
        return $this->container['smoothing_model'];
    }

    /**
     * Sets smoothing_model
     *
     * @param string|null $smoothing_model Controls balance weight between infrequent grams and frequent grams
     *
     * @return self
     */
    public function setSmoothingModel($smoothing_model)
    {
        if (is_null($smoothing_model)) {
            throw new \InvalidArgumentException('non-nullable smoothing_model cannot be null');
        }
        $allowedValues = $this->getSmoothingModelAllowableValues();
        if (!in_array($smoothing_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'smoothing_model', must be one of '%s'",
                    $smoothing_model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smoothing_model'] = $smoothing_model;

        return $this;
    }

    /**
     * Gets gram_size
     *
     * @return int|null
     */
    public function getGramSize()
    {
        return $this->container['gram_size'];
    }

    /**
     * Sets gram_size
     *
     * @param int|null $gram_size Describes max size of the n-grams in the field
     *
     * @return self
     */
    public function setGramSize($gram_size)
    {
        if (is_null($gram_size)) {
            throw new \InvalidArgumentException('non-nullable gram_size cannot be null');
        }

        if (($gram_size > 10)) {
            throw new \InvalidArgumentException('invalid value for $gram_size when calling Suggestions., must be smaller than or equal to 10.');
        }
        if (($gram_size < 1)) {
            throw new \InvalidArgumentException('invalid value for $gram_size when calling Suggestions., must be bigger than or equal to 1.');
        }

        $this->container['gram_size'] = $gram_size;

        return $this;
    }

    /**
     * Gets max_errors
     *
     * @return int|null
     */
    public function getMaxErrors()
    {
        return $this->container['max_errors'];
    }

    /**
     * Sets max_errors
     *
     * @param int|null $max_errors Maximum number of errors for terms to be considered as misspelling in order to for a correction
     *
     * @return self
     */
    public function setMaxErrors($max_errors)
    {
        if (is_null($max_errors)) {
            throw new \InvalidArgumentException('non-nullable max_errors cannot be null');
        }

        if (($max_errors > 5)) {
            throw new \InvalidArgumentException('invalid value for $max_errors when calling Suggestions., must be smaller than or equal to 5.');
        }
        if (($max_errors < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_errors when calling Suggestions., must be bigger than or equal to 1.');
        }

        $this->container['max_errors'] = $max_errors;

        return $this;
    }

    /**
     * Gets min_word_length
     *
     * @return int|null
     */
    public function getMinWordLength()
    {
        return $this->container['min_word_length'];
    }

    /**
     * Sets min_word_length
     *
     * @param int|null $min_word_length The minimum length a suggest text term must have in order to be included
     *
     * @return self
     */
    public function setMinWordLength($min_word_length)
    {
        if (is_null($min_word_length)) {
            throw new \InvalidArgumentException('non-nullable min_word_length cannot be null');
        }

        if (($min_word_length < 1)) {
            throw new \InvalidArgumentException('invalid value for $min_word_length when calling Suggestions., must be bigger than or equal to 1.');
        }

        $this->container['min_word_length'] = $min_word_length;

        return $this;
    }

    /**
     * Gets use_always
     *
     * @return bool|null
     */
    public function getUseAlways()
    {
        return $this->container['use_always'];
    }

    /**
     * Sets use_always
     *
     * @param bool|null $use_always Controls is suggestions are used only if no documents match, or always
     *
     * @return self
     */
    public function setUseAlways($use_always)
    {
        if (is_null($use_always)) {
            throw new \InvalidArgumentException('non-nullable use_always cannot be null');
        }
        $this->container['use_always'] = $use_always;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


