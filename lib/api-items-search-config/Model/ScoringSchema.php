<?php
/**
 * ScoringSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search configuration API
 *
 * Synerise search configuration API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchConfigApiClient\Model;

use \ArrayAccess;
use \Synerise\ItemsSearchConfigApiClient\ObjectSerializer;

/**
 * ScoringSchema Class Doc Comment
 *
 * @category Class
 * @description Item scoring settings that affect the presentation order of the results.  &#x60;0&#x60; means the lowest importance of a parameter, &#x60;1&#x60; is the highest importance.
 * @package  Synerise\ItemsSearchConfigApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScoringSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScoringSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page_visits_popularity' => 'float',
        'transactions_popularity' => 'float',
        'personalized' => 'float',
        'tie_breaker' => 'float',
        'matching' => '\Synerise\ItemsSearchConfigApiClient\Model\Matching',
        'similarity' => '\Synerise\ItemsSearchConfigApiClient\Model\Similarity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'page_visits_popularity' => 'float',
        'transactions_popularity' => 'float',
        'personalized' => 'float',
        'tie_breaker' => 'float',
        'matching' => null,
        'similarity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'page_visits_popularity' => false,
        'transactions_popularity' => false,
        'personalized' => false,
        'tie_breaker' => false,
        'matching' => false,
        'similarity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_visits_popularity' => 'pageVisitsPopularity',
        'transactions_popularity' => 'transactionsPopularity',
        'personalized' => 'personalized',
        'tie_breaker' => 'tieBreaker',
        'matching' => 'matching',
        'similarity' => 'similarity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_visits_popularity' => 'setPageVisitsPopularity',
        'transactions_popularity' => 'setTransactionsPopularity',
        'personalized' => 'setPersonalized',
        'tie_breaker' => 'setTieBreaker',
        'matching' => 'setMatching',
        'similarity' => 'setSimilarity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_visits_popularity' => 'getPageVisitsPopularity',
        'transactions_popularity' => 'getTransactionsPopularity',
        'personalized' => 'getPersonalized',
        'tie_breaker' => 'getTieBreaker',
        'matching' => 'getMatching',
        'similarity' => 'getSimilarity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('page_visits_popularity', $data ?? [], 0);
        $this->setIfExists('transactions_popularity', $data ?? [], 0);
        $this->setIfExists('personalized', $data ?? [], 0);
        $this->setIfExists('tie_breaker', $data ?? [], 0);
        $this->setIfExists('matching', $data ?? [], null);
        $this->setIfExists('similarity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['page_visits_popularity']) && ($this->container['page_visits_popularity'] > 1)) {
            $invalidProperties[] = "invalid value for 'page_visits_popularity', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['page_visits_popularity']) && ($this->container['page_visits_popularity'] < 0)) {
            $invalidProperties[] = "invalid value for 'page_visits_popularity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['transactions_popularity']) && ($this->container['transactions_popularity'] > 1)) {
            $invalidProperties[] = "invalid value for 'transactions_popularity', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transactions_popularity']) && ($this->container['transactions_popularity'] < 0)) {
            $invalidProperties[] = "invalid value for 'transactions_popularity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['personalized']) && ($this->container['personalized'] > 1)) {
            $invalidProperties[] = "invalid value for 'personalized', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['personalized']) && ($this->container['personalized'] < 0)) {
            $invalidProperties[] = "invalid value for 'personalized', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tie_breaker']) && ($this->container['tie_breaker'] > 1)) {
            $invalidProperties[] = "invalid value for 'tie_breaker', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['tie_breaker']) && ($this->container['tie_breaker'] < 0)) {
            $invalidProperties[] = "invalid value for 'tie_breaker', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_visits_popularity
     *
     * @return float|null
     */
    public function getPageVisitsPopularity()
    {
        return $this->container['page_visits_popularity'];
    }

    /**
     * Sets page_visits_popularity
     *
     * @param float|null $page_visits_popularity The importance of how often the item page is visited
     *
     * @return self
     */
    public function setPageVisitsPopularity($page_visits_popularity)
    {
        if (is_null($page_visits_popularity)) {
            throw new \InvalidArgumentException('non-nullable page_visits_popularity cannot be null');
        }

        if (($page_visits_popularity > 1)) {
            throw new \InvalidArgumentException('invalid value for $page_visits_popularity when calling ScoringSchema., must be smaller than or equal to 1.');
        }
        if (($page_visits_popularity < 0)) {
            throw new \InvalidArgumentException('invalid value for $page_visits_popularity when calling ScoringSchema., must be bigger than or equal to 0.');
        }

        $this->container['page_visits_popularity'] = $page_visits_popularity;

        return $this;
    }

    /**
     * Gets transactions_popularity
     *
     * @return float|null
     */
    public function getTransactionsPopularity()
    {
        return $this->container['transactions_popularity'];
    }

    /**
     * Sets transactions_popularity
     *
     * @param float|null $transactions_popularity The importance of how often the item is included in transactions
     *
     * @return self
     */
    public function setTransactionsPopularity($transactions_popularity)
    {
        if (is_null($transactions_popularity)) {
            throw new \InvalidArgumentException('non-nullable transactions_popularity cannot be null');
        }

        if (($transactions_popularity > 1)) {
            throw new \InvalidArgumentException('invalid value for $transactions_popularity when calling ScoringSchema., must be smaller than or equal to 1.');
        }
        if (($transactions_popularity < 0)) {
            throw new \InvalidArgumentException('invalid value for $transactions_popularity when calling ScoringSchema., must be bigger than or equal to 0.');
        }

        $this->container['transactions_popularity'] = $transactions_popularity;

        return $this;
    }

    /**
     * Gets personalized
     *
     * @return float|null
     */
    public function getPersonalized()
    {
        return $this->container['personalized'];
    }

    /**
     * Sets personalized
     *
     * @param float|null $personalized The importance of how relevant a item is to a profile according to the AI model
     *
     * @return self
     */
    public function setPersonalized($personalized)
    {
        if (is_null($personalized)) {
            throw new \InvalidArgumentException('non-nullable personalized cannot be null');
        }

        if (($personalized > 1)) {
            throw new \InvalidArgumentException('invalid value for $personalized when calling ScoringSchema., must be smaller than or equal to 1.');
        }
        if (($personalized < 0)) {
            throw new \InvalidArgumentException('invalid value for $personalized when calling ScoringSchema., must be bigger than or equal to 0.');
        }

        $this->container['personalized'] = $personalized;

        return $this;
    }

    /**
     * Gets tie_breaker
     *
     * @return float|null
     */
    public function getTieBreaker()
    {
        return $this->container['tie_breaker'];
    }

    /**
     * Sets tie_breaker
     *
     * @param float|null $tie_breaker The importance of lesser phrase matches
     *
     * @return self
     */
    public function setTieBreaker($tie_breaker)
    {
        if (is_null($tie_breaker)) {
            throw new \InvalidArgumentException('non-nullable tie_breaker cannot be null');
        }

        if (($tie_breaker > 1)) {
            throw new \InvalidArgumentException('invalid value for $tie_breaker when calling ScoringSchema., must be smaller than or equal to 1.');
        }
        if (($tie_breaker < 0)) {
            throw new \InvalidArgumentException('invalid value for $tie_breaker when calling ScoringSchema., must be bigger than or equal to 0.');
        }

        $this->container['tie_breaker'] = $tie_breaker;

        return $this;
    }

    /**
     * Gets matching
     *
     * @return \Synerise\ItemsSearchConfigApiClient\Model\Matching|null
     */
    public function getMatching()
    {
        return $this->container['matching'];
    }

    /**
     * Sets matching
     *
     * @param \Synerise\ItemsSearchConfigApiClient\Model\Matching|null $matching matching
     *
     * @return self
     */
    public function setMatching($matching)
    {
        if (is_null($matching)) {
            throw new \InvalidArgumentException('non-nullable matching cannot be null');
        }
        $this->container['matching'] = $matching;

        return $this;
    }

    /**
     * Gets similarity
     *
     * @return \Synerise\ItemsSearchConfigApiClient\Model\Similarity|null
     */
    public function getSimilarity()
    {
        return $this->container['similarity'];
    }

    /**
     * Sets similarity
     *
     * @param \Synerise\ItemsSearchConfigApiClient\Model\Similarity|null $similarity similarity
     *
     * @return self
     */
    public function setSimilarity($similarity)
    {
        if (is_null($similarity)) {
            throw new \InvalidArgumentException('non-nullable similarity cannot be null');
        }
        $this->container['similarity'] = $similarity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


