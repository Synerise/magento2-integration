<?php
/**
 * AutocompleteResponseExtras
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search API
 *
 * Synerise search API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchApiClient\Model;

use \ArrayAccess;
use \Synerise\ItemsSearchApiClient\ObjectSerializer;

/**
 * AutocompleteResponseExtras Class Doc Comment
 *
 * @category Class
 * @description Additional information
 * @package  Synerise\ItemsSearchApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AutocompleteResponseExtras implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AutocompleteResponse_extras';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filtered_facets' => 'array<string,array<string,int>>',
        'filtered_result_facets' => 'array<string,array<string,int>>',
        'unfiltered_result_facets' => 'array<string,array<string,int>>',
        'custom_filtered_facets' => 'array<string,array<string,int>>',
        'correlation_id' => 'string',
        'search_id' => 'string',
        'suggestions' => '\Synerise\ItemsSearchApiClient\Model\FullTextSuggestionSchema[]',
        'used_suggestion' => '\Synerise\ItemsSearchApiClient\Model\UsedSuggestion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filtered_facets' => null,
        'filtered_result_facets' => null,
        'unfiltered_result_facets' => null,
        'custom_filtered_facets' => null,
        'correlation_id' => null,
        'search_id' => null,
        'suggestions' => null,
        'used_suggestion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'filtered_facets' => false,
        'filtered_result_facets' => false,
        'unfiltered_result_facets' => false,
        'custom_filtered_facets' => false,
        'correlation_id' => false,
        'search_id' => false,
        'suggestions' => false,
        'used_suggestion' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filtered_facets' => 'filteredFacets',
        'filtered_result_facets' => 'filteredResultFacets',
        'unfiltered_result_facets' => 'unfilteredResultFacets',
        'custom_filtered_facets' => 'customFilteredFacets',
        'correlation_id' => 'correlationId',
        'search_id' => 'searchId',
        'suggestions' => 'suggestions',
        'used_suggestion' => 'usedSuggestion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filtered_facets' => 'setFilteredFacets',
        'filtered_result_facets' => 'setFilteredResultFacets',
        'unfiltered_result_facets' => 'setUnfilteredResultFacets',
        'custom_filtered_facets' => 'setCustomFilteredFacets',
        'correlation_id' => 'setCorrelationId',
        'search_id' => 'setSearchId',
        'suggestions' => 'setSuggestions',
        'used_suggestion' => 'setUsedSuggestion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filtered_facets' => 'getFilteredFacets',
        'filtered_result_facets' => 'getFilteredResultFacets',
        'unfiltered_result_facets' => 'getUnfilteredResultFacets',
        'custom_filtered_facets' => 'getCustomFilteredFacets',
        'correlation_id' => 'getCorrelationId',
        'search_id' => 'getSearchId',
        'suggestions' => 'getSuggestions',
        'used_suggestion' => 'getUsedSuggestion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('filtered_facets', $data ?? [], null);
        $this->setIfExists('filtered_result_facets', $data ?? [], null);
        $this->setIfExists('unfiltered_result_facets', $data ?? [], null);
        $this->setIfExists('custom_filtered_facets', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('search_id', $data ?? [], null);
        $this->setIfExists('suggestions', $data ?? [], null);
        $this->setIfExists('used_suggestion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filtered_result_facets
     *
     * @return array<string,array<string,int>>|null
     */
    public function getFilteredResultFacets()
    {
        return $this->container['filtered_result_facets'];
    }

    /**
     * Sets filtered_result_facets
     *
     * @param array<string,array<string,int>>|null $filtered_result_facets Facet value mappings
     *
     * @return self
     */
    public function setFilteredResultFacets($filtered_result_facets)
    {
        if (is_null($filtered_result_facets)) {
            throw new \InvalidArgumentException('non-nullable filtered_result_facets cannot be null');
        }
        $this->container['filtered_result_facets'] = $filtered_result_facets;

        return $this;
    }

    /**
     * Gets filtered_result_facets
     *
     * @return array<string,array<string,int>>|null
     */
    public function getFilteredFacets()
    {
        return $this->container['filtered_facets'];
    }

    /**
     * Sets filtered_result_facets
     *
     * @param array<string,array<string,int>>|null $filtered_result_facets Facet value mappings
     *
     * @return self
     */
    public function setFilteredFacets($filtered_facets)
    {
        if (is_null($filtered_facets)) {
            throw new \InvalidArgumentException('non-nullable filtered_facets cannot be null');
        }
        $this->container['filtered_facets'] = $filtered_facets;

        return $this;
    }

    /**
     * Gets unfiltered_result_facets
     *
     * @return array<string,array<string,int>>|null
     */
    public function getUnfilteredResultFacets()
    {
        return $this->container['unfiltered_result_facets'];
    }

    /**
     * Sets unfiltered_result_facets
     *
     * @param array<string,array<string,int>>|null $unfiltered_result_facets Facet value mappings
     *
     * @return self
     */
    public function setUnfilteredResultFacets($unfiltered_result_facets)
    {
        if (is_null($unfiltered_result_facets)) {
            throw new \InvalidArgumentException('non-nullable unfiltered_result_facets cannot be null');
        }
        $this->container['unfiltered_result_facets'] = $unfiltered_result_facets;

        return $this;
    }

    /**
     * Gets custom_filtered_facets
     *
     * @return array<string,array<string,int>>|null
     */
    public function getCustomFilteredFacets()
    {
        return $this->container['custom_filtered_facets'];
    }

    /**
     * Sets custom_filtered_facets
     *
     * @param array<string,array<string,int>>|null $custom_filtered_facets Facet value mappings
     *
     * @return self
     */
    public function setCustomFilteredFacets($custom_filtered_facets)
    {
        if (is_null($custom_filtered_facets)) {
            throw new \InvalidArgumentException('non-nullable custom_filtered_facets cannot be null');
        }
        $this->container['custom_filtered_facets'] = $custom_filtered_facets;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id This ID is used: - for search result pagination - as `correlationId` of the search event in events such as `items.search.click`  Search results are cached for 10 minutes.  The cached value will be used if the ID is provided in subsequent calls. This makes search faster and eliminates personalization non-determinism.
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets search_id
     *
     * @return string|null
     * @deprecated
     */
    public function getSearchId()
    {
        return $this->container['search_id'];
    }

    /**
     * Sets search_id
     *
     * @param string|null $search_id **DEPRECATED - use correlationId instead**  This ID is used: - for search result pagination - as `searchId` of the search event in events such as `items.search.click`  Search results are cached for 10 minutes.  The cached value will be used if the ID is provided in subsequent calls. This makes search faster and eliminates personalization non-determinism.
     *
     * @return self
     * @deprecated
     */
    public function setSearchId($search_id)
    {
        if (is_null($search_id)) {
            throw new \InvalidArgumentException('non-nullable search_id cannot be null');
        }
        $this->container['search_id'] = $search_id;

        return $this;
    }

    /**
     * Gets suggestions
     *
     * @return \Synerise\ItemsSearchApiClient\Model\FullTextSuggestionSchema[]|null
     */
    public function getSuggestions()
    {
        return $this->container['suggestions'];
    }

    /**
     * Sets suggestions
     *
     * @param \Synerise\ItemsSearchApiClient\Model\FullTextSuggestionSchema[]|null $suggestions A list of search suggestions
     *
     * @return self
     */
    public function setSuggestions($suggestions)
    {
        if (is_null($suggestions)) {
            throw new \InvalidArgumentException('non-nullable suggestions cannot be null');
        }
        $this->container['suggestions'] = $suggestions;

        return $this;
    }

    /**
     * Gets used_suggestion
     *
     * @return \Synerise\ItemsSearchApiClient\Model\UsedSuggestion|null
     */
    public function getUsedSuggestion()
    {
        return $this->container['used_suggestion'];
    }

    /**
     * Sets used_suggestion
     *
     * @param \Synerise\ItemsSearchApiClient\Model\UsedSuggestion|null $used_suggestion used_suggestion
     *
     * @return self
     */
    public function setUsedSuggestion($used_suggestion)
    {
        if (is_null($used_suggestion)) {
            throw new \InvalidArgumentException('non-nullable used_suggestion cannot be null');
        }
        $this->container['used_suggestion'] = $used_suggestion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


