<?php
/**
 * VisualSearchApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Synerise\ItemsSearchApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Synerise search API
 *
 * Synerise search API v2.0 documentation
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\ItemsSearchApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\ItemsSearchApiClient\ApiException;
use Synerise\ItemsSearchApiClient\Configuration;
use Synerise\ItemsSearchApiClient\HeaderSelector;
use Synerise\ItemsSearchApiClient\ObjectSerializer;

/**
 * VisualSearchApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\ItemsSearchApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VisualSearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchVisualGet' => [
            'application/json',
        ],
        'searchVisualPost' => [
            'application/json',
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchVisualGet
     *
     * Visual items search
     *
     * @param  string $url URL of the image to be used in the visual search (required)
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  string $client_uuid UUID of the profile for which the search is performed (optional)
     * @param  bool $personalize If set to &#x60;false&#x60;, the search result is not personalized. (optional, default to true)
     * @param  string $correlation_id Correlation ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional)
     * @param  string $search_id **DEPRECATED - use correlationId instead**  Search ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional) (deprecated)
     * @param  string $sort_by_metric Name of the metric by which the data will be sorted (optional)
     * @param  string $sort_by_geo_point Geo-point (&#x60;{latitude},{longitude}&#x60;) for data sorting. Results are sorted by distance from this point. &#x60;ordering: asc&#x60; means \&quot;closest first\&quot;. (optional)
     * @param  string[] $filter_geo_points The definition of a geographical area to filter by.  Given one geo-point, the results will be limited to a radius around a point. To override the default radius (1000 meters), provide the &#x60;filterAroundRadius&#x60; parameter. **Example input:** &#x60;[\&quot;34.052235,-118.243685\&quot;]&#x60;  Given two geo-points, the results will be limited to a rectangular area. The first point defines the upper-left corner of the rectangle and the second is the lower-right corner. **Example input:** &#x60;[\&quot;50,-100\&quot;, \&quot;25,150\&quot;]&#x60;  Given three or more geo-points, the results will be limited to a polygonal area. **Example input:** &#x60;[\&quot;50,0\&quot;, \&quot;40,20\&quot;, \&quot;-20,10\&quot;]&#x60; (optional)
     * @param  int $filter_around_radius Radius in meters to be used when filtering using geo-location. Can only be used when filtering by a single geo-point. (optional, default to 1000)
     * @param  string $filter_anchor Anchor (&#x60;{width},{height}&#x60;) by which the visual results data will be filtered. &#x60;{width},{height}&#x60; correspond to normalized image coordinates, i.e. they are in range [0,1]. Anchor (0,0) corresponds to the top-left pixel of an image. (optional)
     * @param  string $filters IQL query string. For details, see the [Help Center](https://help.synerise.com/developers/iql/). (optional)
     * @param  string[] $facets A list of attributes for which facets will be returned. A single &#x60;*&#x60; value matches all facetable attributes.  To determine which groups of facets should be returned, use the &#x60;includeFacets&#x60; parameter. (optional)
     * @param  int $facets_size Determines how many items will be used for facets aggregation. (optional, default to 2000)
     * @param  int $max_values_per_facet Determines how many values will be retrieved per facet. (optional, default to 50)
     * @param  bool $case_sensitive_facet_values Specifies whether facets aggregation should be case sensitive. (optional, default to false)
     * @param  string[] $display_attributes List of ad hoc attributes that will be returned for each found item (optional)
     * @param  string[] $context List of context strings for a search query (optional)
     * @param  string $include_facets Determines which groups of facets will be returned: both filtered and unfiltered; just filtered; just unfiltered; or no group at at all.  To determine which attributes should be returned as facets in each group, use the &#x60;facets&#x60; parameter. (optional, default to 'filtered')
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 20)
     * @param  string $sort_by Name of the attribute by which the data will be sorted.  Sorting by attribute may cause a promoted item to be in a different position that defined in a query rule. (optional)
     * @param  string $ordering Sorting order (optional, default to 'asc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  bool $ignore_query_rules If set to &#x60;true&#x60;, query rules are not applied. (optional, default to false)
     * @param  int[] $exclude_query_rules List of query rules that will not be applied. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualGet'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchApiClient\Model\VisualSearchResponse|\Synerise\ItemsSearchApiClient\Model\Error
     */
    public function searchVisualGet($url, $index_id, $client_uuid = null, $personalize = true, $correlation_id = null, $search_id = null, $sort_by_metric = null, $sort_by_geo_point = null, $filter_geo_points = null, $filter_around_radius = 1000, $filter_anchor = null, $filters = null, $facets = null, $facets_size = 2000, $max_values_per_facet = 50, $case_sensitive_facet_values = false, $display_attributes = null, $context = null, $include_facets = 'filtered', $page = 1, $limit = 20, $sort_by = null, $ordering = 'asc', $include_meta = false, $ignore_query_rules = false, $exclude_query_rules = null, string $contentType = self::contentTypes['searchVisualGet'][0])
    {
        list($response) = $this->searchVisualGetWithHttpInfo($url, $index_id, $client_uuid, $personalize, $correlation_id, $search_id, $sort_by_metric, $sort_by_geo_point, $filter_geo_points, $filter_around_radius, $filter_anchor, $filters, $facets, $facets_size, $max_values_per_facet, $case_sensitive_facet_values, $display_attributes, $context, $include_facets, $page, $limit, $sort_by, $ordering, $include_meta, $ignore_query_rules, $exclude_query_rules, $contentType);
        return $response;
    }

    /**
     * Operation searchVisualGetWithHttpInfo
     *
     * Visual items search
     *
     * @param  string $url URL of the image to be used in the visual search (required)
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  string $client_uuid UUID of the profile for which the search is performed (optional)
     * @param  bool $personalize If set to &#x60;false&#x60;, the search result is not personalized. (optional, default to true)
     * @param  string $correlation_id Correlation ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional)
     * @param  string $search_id **DEPRECATED - use correlationId instead**  Search ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional) (deprecated)
     * @param  string $sort_by_metric Name of the metric by which the data will be sorted (optional)
     * @param  string $sort_by_geo_point Geo-point (&#x60;{latitude},{longitude}&#x60;) for data sorting. Results are sorted by distance from this point. &#x60;ordering: asc&#x60; means \&quot;closest first\&quot;. (optional)
     * @param  string[] $filter_geo_points The definition of a geographical area to filter by.  Given one geo-point, the results will be limited to a radius around a point. To override the default radius (1000 meters), provide the &#x60;filterAroundRadius&#x60; parameter. **Example input:** &#x60;[\&quot;34.052235,-118.243685\&quot;]&#x60;  Given two geo-points, the results will be limited to a rectangular area. The first point defines the upper-left corner of the rectangle and the second is the lower-right corner. **Example input:** &#x60;[\&quot;50,-100\&quot;, \&quot;25,150\&quot;]&#x60;  Given three or more geo-points, the results will be limited to a polygonal area. **Example input:** &#x60;[\&quot;50,0\&quot;, \&quot;40,20\&quot;, \&quot;-20,10\&quot;]&#x60; (optional)
     * @param  int $filter_around_radius Radius in meters to be used when filtering using geo-location. Can only be used when filtering by a single geo-point. (optional, default to 1000)
     * @param  string $filter_anchor Anchor (&#x60;{width},{height}&#x60;) by which the visual results data will be filtered. &#x60;{width},{height}&#x60; correspond to normalized image coordinates, i.e. they are in range [0,1]. Anchor (0,0) corresponds to the top-left pixel of an image. (optional)
     * @param  string $filters IQL query string. For details, see the [Help Center](https://help.synerise.com/developers/iql/). (optional)
     * @param  string[] $facets A list of attributes for which facets will be returned. A single &#x60;*&#x60; value matches all facetable attributes.  To determine which groups of facets should be returned, use the &#x60;includeFacets&#x60; parameter. (optional)
     * @param  int $facets_size Determines how many items will be used for facets aggregation. (optional, default to 2000)
     * @param  int $max_values_per_facet Determines how many values will be retrieved per facet. (optional, default to 50)
     * @param  bool $case_sensitive_facet_values Specifies whether facets aggregation should be case sensitive. (optional, default to false)
     * @param  string[] $display_attributes List of ad hoc attributes that will be returned for each found item (optional)
     * @param  string[] $context List of context strings for a search query (optional)
     * @param  string $include_facets Determines which groups of facets will be returned: both filtered and unfiltered; just filtered; just unfiltered; or no group at at all.  To determine which attributes should be returned as facets in each group, use the &#x60;facets&#x60; parameter. (optional, default to 'filtered')
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 20)
     * @param  string $sort_by Name of the attribute by which the data will be sorted.  Sorting by attribute may cause a promoted item to be in a different position that defined in a query rule. (optional)
     * @param  string $ordering Sorting order (optional, default to 'asc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  bool $ignore_query_rules If set to &#x60;true&#x60;, query rules are not applied. (optional, default to false)
     * @param  int[] $exclude_query_rules List of query rules that will not be applied. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualGet'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchApiClient\Model\VisualSearchResponse|\Synerise\ItemsSearchApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVisualGetWithHttpInfo($url, $index_id, $client_uuid = null, $personalize = true, $correlation_id = null, $search_id = null, $sort_by_metric = null, $sort_by_geo_point = null, $filter_geo_points = null, $filter_around_radius = 1000, $filter_anchor = null, $filters = null, $facets = null, $facets_size = 2000, $max_values_per_facet = 50, $case_sensitive_facet_values = false, $display_attributes = null, $context = null, $include_facets = 'filtered', $page = 1, $limit = 20, $sort_by = null, $ordering = 'asc', $include_meta = false, $ignore_query_rules = false, $exclude_query_rules = null, string $contentType = self::contentTypes['searchVisualGet'][0])
    {
        $request = $this->searchVisualGetRequest($url, $index_id, $client_uuid, $personalize, $correlation_id, $search_id, $sort_by_metric, $sort_by_geo_point, $filter_geo_points, $filter_around_radius, $filter_anchor, $filters, $facets, $facets_size, $max_values_per_facet, $case_sensitive_facet_values, $display_attributes, $context, $include_facets, $page, $limit, $sort_by, $ordering, $include_meta, $ignore_query_rules, $exclude_query_rules, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchVisualGetAsync
     *
     * Visual items search
     *
     * @param  string $url URL of the image to be used in the visual search (required)
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  string $client_uuid UUID of the profile for which the search is performed (optional)
     * @param  bool $personalize If set to &#x60;false&#x60;, the search result is not personalized. (optional, default to true)
     * @param  string $correlation_id Correlation ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional)
     * @param  string $search_id **DEPRECATED - use correlationId instead**  Search ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional) (deprecated)
     * @param  string $sort_by_metric Name of the metric by which the data will be sorted (optional)
     * @param  string $sort_by_geo_point Geo-point (&#x60;{latitude},{longitude}&#x60;) for data sorting. Results are sorted by distance from this point. &#x60;ordering: asc&#x60; means \&quot;closest first\&quot;. (optional)
     * @param  string[] $filter_geo_points The definition of a geographical area to filter by.  Given one geo-point, the results will be limited to a radius around a point. To override the default radius (1000 meters), provide the &#x60;filterAroundRadius&#x60; parameter. **Example input:** &#x60;[\&quot;34.052235,-118.243685\&quot;]&#x60;  Given two geo-points, the results will be limited to a rectangular area. The first point defines the upper-left corner of the rectangle and the second is the lower-right corner. **Example input:** &#x60;[\&quot;50,-100\&quot;, \&quot;25,150\&quot;]&#x60;  Given three or more geo-points, the results will be limited to a polygonal area. **Example input:** &#x60;[\&quot;50,0\&quot;, \&quot;40,20\&quot;, \&quot;-20,10\&quot;]&#x60; (optional)
     * @param  int $filter_around_radius Radius in meters to be used when filtering using geo-location. Can only be used when filtering by a single geo-point. (optional, default to 1000)
     * @param  string $filter_anchor Anchor (&#x60;{width},{height}&#x60;) by which the visual results data will be filtered. &#x60;{width},{height}&#x60; correspond to normalized image coordinates, i.e. they are in range [0,1]. Anchor (0,0) corresponds to the top-left pixel of an image. (optional)
     * @param  string $filters IQL query string. For details, see the [Help Center](https://help.synerise.com/developers/iql/). (optional)
     * @param  string[] $facets A list of attributes for which facets will be returned. A single &#x60;*&#x60; value matches all facetable attributes.  To determine which groups of facets should be returned, use the &#x60;includeFacets&#x60; parameter. (optional)
     * @param  int $facets_size Determines how many items will be used for facets aggregation. (optional, default to 2000)
     * @param  int $max_values_per_facet Determines how many values will be retrieved per facet. (optional, default to 50)
     * @param  bool $case_sensitive_facet_values Specifies whether facets aggregation should be case sensitive. (optional, default to false)
     * @param  string[] $display_attributes List of ad hoc attributes that will be returned for each found item (optional)
     * @param  string[] $context List of context strings for a search query (optional)
     * @param  string $include_facets Determines which groups of facets will be returned: both filtered and unfiltered; just filtered; just unfiltered; or no group at at all.  To determine which attributes should be returned as facets in each group, use the &#x60;facets&#x60; parameter. (optional, default to 'filtered')
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 20)
     * @param  string $sort_by Name of the attribute by which the data will be sorted.  Sorting by attribute may cause a promoted item to be in a different position that defined in a query rule. (optional)
     * @param  string $ordering Sorting order (optional, default to 'asc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  bool $ignore_query_rules If set to &#x60;true&#x60;, query rules are not applied. (optional, default to false)
     * @param  int[] $exclude_query_rules List of query rules that will not be applied. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVisualGetAsync($url, $index_id, $client_uuid = null, $personalize = true, $correlation_id = null, $search_id = null, $sort_by_metric = null, $sort_by_geo_point = null, $filter_geo_points = null, $filter_around_radius = 1000, $filter_anchor = null, $filters = null, $facets = null, $facets_size = 2000, $max_values_per_facet = 50, $case_sensitive_facet_values = false, $display_attributes = null, $context = null, $include_facets = 'filtered', $page = 1, $limit = 20, $sort_by = null, $ordering = 'asc', $include_meta = false, $ignore_query_rules = false, $exclude_query_rules = null, string $contentType = self::contentTypes['searchVisualGet'][0])
    {
        return $this->searchVisualGetAsyncWithHttpInfo($url, $index_id, $client_uuid, $personalize, $correlation_id, $search_id, $sort_by_metric, $sort_by_geo_point, $filter_geo_points, $filter_around_radius, $filter_anchor, $filters, $facets, $facets_size, $max_values_per_facet, $case_sensitive_facet_values, $display_attributes, $context, $include_facets, $page, $limit, $sort_by, $ordering, $include_meta, $ignore_query_rules, $exclude_query_rules, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchVisualGetAsyncWithHttpInfo
     *
     * Visual items search
     *
     * @param  string $url URL of the image to be used in the visual search (required)
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  string $client_uuid UUID of the profile for which the search is performed (optional)
     * @param  bool $personalize If set to &#x60;false&#x60;, the search result is not personalized. (optional, default to true)
     * @param  string $correlation_id Correlation ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional)
     * @param  string $search_id **DEPRECATED - use correlationId instead**  Search ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional) (deprecated)
     * @param  string $sort_by_metric Name of the metric by which the data will be sorted (optional)
     * @param  string $sort_by_geo_point Geo-point (&#x60;{latitude},{longitude}&#x60;) for data sorting. Results are sorted by distance from this point. &#x60;ordering: asc&#x60; means \&quot;closest first\&quot;. (optional)
     * @param  string[] $filter_geo_points The definition of a geographical area to filter by.  Given one geo-point, the results will be limited to a radius around a point. To override the default radius (1000 meters), provide the &#x60;filterAroundRadius&#x60; parameter. **Example input:** &#x60;[\&quot;34.052235,-118.243685\&quot;]&#x60;  Given two geo-points, the results will be limited to a rectangular area. The first point defines the upper-left corner of the rectangle and the second is the lower-right corner. **Example input:** &#x60;[\&quot;50,-100\&quot;, \&quot;25,150\&quot;]&#x60;  Given three or more geo-points, the results will be limited to a polygonal area. **Example input:** &#x60;[\&quot;50,0\&quot;, \&quot;40,20\&quot;, \&quot;-20,10\&quot;]&#x60; (optional)
     * @param  int $filter_around_radius Radius in meters to be used when filtering using geo-location. Can only be used when filtering by a single geo-point. (optional, default to 1000)
     * @param  string $filter_anchor Anchor (&#x60;{width},{height}&#x60;) by which the visual results data will be filtered. &#x60;{width},{height}&#x60; correspond to normalized image coordinates, i.e. they are in range [0,1]. Anchor (0,0) corresponds to the top-left pixel of an image. (optional)
     * @param  string $filters IQL query string. For details, see the [Help Center](https://help.synerise.com/developers/iql/). (optional)
     * @param  string[] $facets A list of attributes for which facets will be returned. A single &#x60;*&#x60; value matches all facetable attributes.  To determine which groups of facets should be returned, use the &#x60;includeFacets&#x60; parameter. (optional)
     * @param  int $facets_size Determines how many items will be used for facets aggregation. (optional, default to 2000)
     * @param  int $max_values_per_facet Determines how many values will be retrieved per facet. (optional, default to 50)
     * @param  bool $case_sensitive_facet_values Specifies whether facets aggregation should be case sensitive. (optional, default to false)
     * @param  string[] $display_attributes List of ad hoc attributes that will be returned for each found item (optional)
     * @param  string[] $context List of context strings for a search query (optional)
     * @param  string $include_facets Determines which groups of facets will be returned: both filtered and unfiltered; just filtered; just unfiltered; or no group at at all.  To determine which attributes should be returned as facets in each group, use the &#x60;facets&#x60; parameter. (optional, default to 'filtered')
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 20)
     * @param  string $sort_by Name of the attribute by which the data will be sorted.  Sorting by attribute may cause a promoted item to be in a different position that defined in a query rule. (optional)
     * @param  string $ordering Sorting order (optional, default to 'asc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  bool $ignore_query_rules If set to &#x60;true&#x60;, query rules are not applied. (optional, default to false)
     * @param  int[] $exclude_query_rules List of query rules that will not be applied. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVisualGetAsyncWithHttpInfo($url, $index_id, $client_uuid = null, $personalize = true, $correlation_id = null, $search_id = null, $sort_by_metric = null, $sort_by_geo_point = null, $filter_geo_points = null, $filter_around_radius = 1000, $filter_anchor = null, $filters = null, $facets = null, $facets_size = 2000, $max_values_per_facet = 50, $case_sensitive_facet_values = false, $display_attributes = null, $context = null, $include_facets = 'filtered', $page = 1, $limit = 20, $sort_by = null, $ordering = 'asc', $include_meta = false, $ignore_query_rules = false, $exclude_query_rules = null, string $contentType = self::contentTypes['searchVisualGet'][0])
    {
        $returnType = '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse';
        $request = $this->searchVisualGetRequest($url, $index_id, $client_uuid, $personalize, $correlation_id, $search_id, $sort_by_metric, $sort_by_geo_point, $filter_geo_points, $filter_around_radius, $filter_anchor, $filters, $facets, $facets_size, $max_values_per_facet, $case_sensitive_facet_values, $display_attributes, $context, $include_facets, $page, $limit, $sort_by, $ordering, $include_meta, $ignore_query_rules, $exclude_query_rules, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchVisualGet'
     *
     * @param  string $url URL of the image to be used in the visual search (required)
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  string $client_uuid UUID of the profile for which the search is performed (optional)
     * @param  bool $personalize If set to &#x60;false&#x60;, the search result is not personalized. (optional, default to true)
     * @param  string $correlation_id Correlation ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional)
     * @param  string $search_id **DEPRECATED - use correlationId instead**  Search ID for pagination. If a search with the ID was performed recently (last 10 minutes), the cached results will be used.  Do not send this if sortBy/filters/sorting order, etc. have changed - the cached results may have different order or may match different filters. (optional) (deprecated)
     * @param  string $sort_by_metric Name of the metric by which the data will be sorted (optional)
     * @param  string $sort_by_geo_point Geo-point (&#x60;{latitude},{longitude}&#x60;) for data sorting. Results are sorted by distance from this point. &#x60;ordering: asc&#x60; means \&quot;closest first\&quot;. (optional)
     * @param  string[] $filter_geo_points The definition of a geographical area to filter by.  Given one geo-point, the results will be limited to a radius around a point. To override the default radius (1000 meters), provide the &#x60;filterAroundRadius&#x60; parameter. **Example input:** &#x60;[\&quot;34.052235,-118.243685\&quot;]&#x60;  Given two geo-points, the results will be limited to a rectangular area. The first point defines the upper-left corner of the rectangle and the second is the lower-right corner. **Example input:** &#x60;[\&quot;50,-100\&quot;, \&quot;25,150\&quot;]&#x60;  Given three or more geo-points, the results will be limited to a polygonal area. **Example input:** &#x60;[\&quot;50,0\&quot;, \&quot;40,20\&quot;, \&quot;-20,10\&quot;]&#x60; (optional)
     * @param  int $filter_around_radius Radius in meters to be used when filtering using geo-location. Can only be used when filtering by a single geo-point. (optional, default to 1000)
     * @param  string $filter_anchor Anchor (&#x60;{width},{height}&#x60;) by which the visual results data will be filtered. &#x60;{width},{height}&#x60; correspond to normalized image coordinates, i.e. they are in range [0,1]. Anchor (0,0) corresponds to the top-left pixel of an image. (optional)
     * @param  string $filters IQL query string. For details, see the [Help Center](https://help.synerise.com/developers/iql/). (optional)
     * @param  string[] $facets A list of attributes for which facets will be returned. A single &#x60;*&#x60; value matches all facetable attributes.  To determine which groups of facets should be returned, use the &#x60;includeFacets&#x60; parameter. (optional)
     * @param  int $facets_size Determines how many items will be used for facets aggregation. (optional, default to 2000)
     * @param  int $max_values_per_facet Determines how many values will be retrieved per facet. (optional, default to 50)
     * @param  bool $case_sensitive_facet_values Specifies whether facets aggregation should be case sensitive. (optional, default to false)
     * @param  string[] $display_attributes List of ad hoc attributes that will be returned for each found item (optional)
     * @param  string[] $context List of context strings for a search query (optional)
     * @param  string $include_facets Determines which groups of facets will be returned: both filtered and unfiltered; just filtered; just unfiltered; or no group at at all.  To determine which attributes should be returned as facets in each group, use the &#x60;facets&#x60; parameter. (optional, default to 'filtered')
     * @param  int $page Page number to return for pagination. The first page has the index &#x60;1&#x60;. (optional, default to 1)
     * @param  int $limit The number of items to return per page (optional, default to 20)
     * @param  string $sort_by Name of the attribute by which the data will be sorted.  Sorting by attribute may cause a promoted item to be in a different position that defined in a query rule. (optional)
     * @param  string $ordering Sorting order (optional, default to 'asc')
     * @param  bool $include_meta When &#x60;true&#x60;, pagination metadata is included in the response body.  When &#x60;false&#x60;, the data is included in the response headers:  - Link: links to neighbors, first, and last pages in pagination.  - X-Pagination-Total-Count: total number of items on all pages  - X-Pagination-Total-Pages: total number of pages  - X-Pagination-Page: current page  - X-Pagination-Limit: maximum number of items on a page  - X-Pagination-Sorted-By: parameter that the items were sorted by  - X-Pagination-Ordering: sorting direction (optional, default to false)
     * @param  bool $ignore_query_rules If set to &#x60;true&#x60;, query rules are not applied. (optional, default to false)
     * @param  int[] $exclude_query_rules List of query rules that will not be applied. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchVisualGetRequest($url, $index_id, $client_uuid = null, $personalize = true, $correlation_id = null, $search_id = null, $sort_by_metric = null, $sort_by_geo_point = null, $filter_geo_points = null, $filter_around_radius = 1000, $filter_anchor = null, $filters = null, $facets = null, $facets_size = 2000, $max_values_per_facet = 50, $case_sensitive_facet_values = false, $display_attributes = null, $context = null, $include_facets = 'filtered', $page = 1, $limit = 20, $sort_by = null, $ordering = 'asc', $include_meta = false, $ignore_query_rules = false, $exclude_query_rules = null, string $contentType = self::contentTypes['searchVisualGet'][0])
    {

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling searchVisualGet'
            );
        }

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling searchVisualGet'
            );
        }












        if ($facets_size !== null && $facets_size > 10000) {
            throw new \InvalidArgumentException('invalid value for "$facets_size" when calling VisualSearchApi.searchVisualGet, must be smaller than or equal to 10000.');
        }
        if ($facets_size !== null && $facets_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$facets_size" when calling VisualSearchApi.searchVisualGet, must be bigger than or equal to 1.');
        }
        
        if ($max_values_per_facet !== null && $max_values_per_facet > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_values_per_facet" when calling VisualSearchApi.searchVisualGet, must be smaller than or equal to 1000.');
        }
        if ($max_values_per_facet !== null && $max_values_per_facet < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_values_per_facet" when calling VisualSearchApi.searchVisualGet, must be bigger than or equal to 1.');
        }
        





        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VisualSearchApi.searchVisualGet, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VisualSearchApi.searchVisualGet, must be bigger than or equal to 0.');
        }
        






        $resourcePath = '/search/v2/indices/{indexId}/visual';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_uuid,
            'clientUUID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $personalize,
            'personalize', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $correlation_id,
            'correlationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'searchId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_metric,
            'sortByMetric', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_geo_point,
            'sortByGeoPoint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_geo_points,
            'filterGeoPoints', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_around_radius,
            'filterAroundRadius', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_anchor,
            'filterAnchor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facets,
            'facets', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facets_size,
            'facetsSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_values_per_facet,
            'maxValuesPerFacet', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $case_sensitive_facet_values,
            'caseSensitiveFacetValues', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $display_attributes,
            'displayAttributes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_facets,
            'includeFacets', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordering,
            'ordering', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_meta,
            'includeMeta', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignore_query_rules,
            'ignoreQueryRules', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_query_rules,
            'excludeQueryRules', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchVisualPost
     *
     * Visual items search
     *
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  \Synerise\ItemsSearchApiClient\Model\SearchVisualPostRequest $search_visual_post_request Request for performing visual search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualPost'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Synerise\ItemsSearchApiClient\Model\VisualSearchResponse|\Synerise\ItemsSearchApiClient\Model\Error
     */
    public function searchVisualPost($index_id, $search_visual_post_request, string $contentType = self::contentTypes['searchVisualPost'][0])
    {
        list($response) = $this->searchVisualPostWithHttpInfo($index_id, $search_visual_post_request, $contentType);
        return $response;
    }

    /**
     * Operation searchVisualPostWithHttpInfo
     *
     * Visual items search
     *
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  \Synerise\ItemsSearchApiClient\Model\SearchVisualPostRequest $search_visual_post_request Request for performing visual search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualPost'] to see the possible values for this operation
     *
     * @throws \Synerise\ItemsSearchApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Synerise\ItemsSearchApiClient\Model\VisualSearchResponse|\Synerise\ItemsSearchApiClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVisualPostWithHttpInfo($index_id, $search_visual_post_request, string $contentType = self::contentTypes['searchVisualPost'][0])
    {
        $request = $this->searchVisualPostRequest($index_id, $search_visual_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Synerise\ItemsSearchApiClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Synerise\ItemsSearchApiClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\ItemsSearchApiClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\ItemsSearchApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchVisualPostAsync
     *
     * Visual items search
     *
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  \Synerise\ItemsSearchApiClient\Model\SearchVisualPostRequest $search_visual_post_request Request for performing visual search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVisualPostAsync($index_id, $search_visual_post_request, string $contentType = self::contentTypes['searchVisualPost'][0])
    {
        return $this->searchVisualPostAsyncWithHttpInfo($index_id, $search_visual_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchVisualPostAsyncWithHttpInfo
     *
     * Visual items search
     *
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  \Synerise\ItemsSearchApiClient\Model\SearchVisualPostRequest $search_visual_post_request Request for performing visual search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchVisualPostAsyncWithHttpInfo($index_id, $search_visual_post_request, string $contentType = self::contentTypes['searchVisualPost'][0])
    {
        $returnType = '\Synerise\ItemsSearchApiClient\Model\VisualSearchResponse';
        $request = $this->searchVisualPostRequest($index_id, $search_visual_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchVisualPost'
     *
     * @param  string $index_id ID of the index to be used in the search operation (required)
     * @param  \Synerise\ItemsSearchApiClient\Model\SearchVisualPostRequest $search_visual_post_request Request for performing visual search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchVisualPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchVisualPostRequest($index_id, $search_visual_post_request, string $contentType = self::contentTypes['searchVisualPost'][0])
    {

        // verify the required parameter 'index_id' is set
        if ($index_id === null || (is_array($index_id) && count($index_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $index_id when calling searchVisualPost'
            );
        }

        // verify the required parameter 'search_visual_post_request' is set
        if ($search_visual_post_request === null || (is_array($search_visual_post_request) && count($search_visual_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_visual_post_request when calling searchVisualPost'
            );
        }


        $resourcePath = '/search/v2/indices/{indexId}/visual';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($index_id !== null) {
            $resourcePath = str_replace(
                '{' . 'indexId' . '}',
                ObjectSerializer::toPathValue($index_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($search_visual_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($search_visual_post_request));
            } else {
                $httpBody = $search_visual_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
