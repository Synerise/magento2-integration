<?php
/**
 * ItemsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Synerise\CatalogsApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Items-collector API Reference
 *
 * This is API for Catalogs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: marcin.stelmach@synerise.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Synerise\CatalogsApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\CatalogsApiClient\ApiException;
use Synerise\CatalogsApiClient\Configuration;
use Synerise\CatalogsApiClient\HeaderSelector;
use Synerise\CatalogsApiClient\ObjectSerializer;

/**
 * ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\CatalogsApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addItems
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addItems($catalog_id, $add_item = null)
    {
        list($response) = $this->addItemsWithHttpInfo($catalog_id, $add_item);
        return $response;
    }

    /**
     * Operation addItemsWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addItemsWithHttpInfo($catalog_id, $add_item = null)
    {
        $request = $this->addItemsRequest($catalog_id, $add_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addItemsAsync
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsAsync($catalog_id, $add_item = null)
    {
        return $this->addItemsAsyncWithHttpInfo($catalog_id, $add_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addItemsAsyncWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsAsyncWithHttpInfo($catalog_id, $add_item = null)
    {
        $returnType = 'bool';
        $request = $this->addItemsRequest($catalog_id, $add_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addItems'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addItemsRequest($catalog_id, $add_item = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling addItems'
            );
        }

        $resourcePath = '/bags/{catalogId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_item)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_item));
            } else {
                $httpBody = $add_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addItemsBatch
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addItemsBatch($catalog_id, $add_item = null)
    {
        list($response) = $this->addItemsBatchWithHttpInfo($catalog_id, $add_item);
        return $response;
    }

    /**
     * Operation addItemsBatchWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addItemsBatchWithHttpInfo($catalog_id, $add_item = null)
    {
        $request = $this->addItemsBatchRequest($catalog_id, $add_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addItemsBatchAsync
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsBatchAsync($catalog_id, $add_item = null)
    {
        return $this->addItemsBatchAsyncWithHttpInfo($catalog_id, $add_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addItemsBatchAsyncWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsBatchAsyncWithHttpInfo($catalog_id, $add_item = null)
    {
        $returnType = 'bool';
        $request = $this->addItemsBatchRequest($catalog_id, $add_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addItemsBatch'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addItemsBatchRequest($catalog_id, $add_item = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling addItemsBatch'
            );
        }

        $resourcePath = '/bags/{catalogId}/items/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_item)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_item));
            } else {
                $httpBody = $add_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addItemsInternal
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addItemsInternal($catalog_id, $add_item = null)
    {
        list($response) = $this->addItemsInternalWithHttpInfo($catalog_id, $add_item);
        return $response;
    }

    /**
     * Operation addItemsInternalWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addItemsInternalWithHttpInfo($catalog_id, $add_item = null)
    {
        $request = $this->addItemsInternalRequest($catalog_id, $add_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addItemsInternalAsync
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsInternalAsync($catalog_id, $add_item = null)
    {
        return $this->addItemsInternalAsyncWithHttpInfo($catalog_id, $add_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addItemsInternalAsyncWithHttpInfo
     *
     * Add items
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addItemsInternalAsyncWithHttpInfo($catalog_id, $add_item = null)
    {
        $returnType = 'bool';
        $request = $this->addItemsInternalRequest($catalog_id, $add_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addItemsInternal'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  \Synerise\CatalogsApiClient\Model\AddItem[] $add_item JSON object with any number of key/value pairs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addItemsInternalRequest($catalog_id, $add_item = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling addItemsInternal'
            );
        }

        $resourcePath = '/internal/bags/{catalogId}/items/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_item)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_item));
            } else {
                $httpBody = $add_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItem
     *
     * Get single item by database ID
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#39;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2006
     */
    public function getItem($catalog_id, $item_id)
    {
        list($response) = $this->getItemWithHttpInfo($catalog_id, $item_id);
        return $response;
    }

    /**
     * Operation getItemWithHttpInfo
     *
     * Get single item by database ID
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#39;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemWithHttpInfo($catalog_id, $item_id)
    {
        $request = $this->getItemRequest($catalog_id, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemAsync
     *
     * Get single item by database ID
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#39;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemAsync($catalog_id, $item_id)
    {
        return $this->getItemAsyncWithHttpInfo($catalog_id, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemAsyncWithHttpInfo
     *
     * Get single item by database ID
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#39;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemAsyncWithHttpInfo($catalog_id, $item_id)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
        $request = $this->getItemRequest($catalog_id, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItem'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#39;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemRequest($catalog_id, $item_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getItem'
            );
        }

        $resourcePath = '/bags/{catalogId}/items/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemByKey
     *
     * Get single item by itemKey
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key item_key (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2006
     */
    public function getItemByKey($catalog_id, $item_key)
    {
        list($response) = $this->getItemByKeyWithHttpInfo($catalog_id, $item_key);
        return $response;
    }

    /**
     * Operation getItemByKeyWithHttpInfo
     *
     * Get single item by itemKey
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemByKeyWithHttpInfo($catalog_id, $item_key)
    {
        $request = $this->getItemByKeyRequest($catalog_id, $item_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemByKeyAsync
     *
     * Get single item by itemKey
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByKeyAsync($catalog_id, $item_key)
    {
        return $this->getItemByKeyAsyncWithHttpInfo($catalog_id, $item_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemByKeyAsyncWithHttpInfo
     *
     * Get single item by itemKey
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByKeyAsyncWithHttpInfo($catalog_id, $item_key)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
        $request = $this->getItemByKeyRequest($catalog_id, $item_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemByKey'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemByKeyRequest($catalog_id, $item_key)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getItemByKey'
            );
        }
        // verify the required parameter 'item_key' is set
        if ($item_key === null || (is_array($item_key) && count($item_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_key when calling getItemByKey'
            );
        }

        $resourcePath = '/bags/{catalogId}/items/itemKey/{itemKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($item_key !== null) {
            $resourcePath = str_replace(
                '{' . 'itemKey' . '}',
                ObjectSerializer::toPathValue($item_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemDetailByKey
     *
     * Get single item by unique key
     *
     * @param  string $catalog_name Name of the catalog (required)
     * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field and the string value of the catalog entry.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2006
     */
    public function getItemDetailByKey($catalog_name, $key)
    {
        list($response) = $this->getItemDetailByKeyWithHttpInfo($catalog_name, $key);
        return $response;
    }

    /**
     * Operation getItemDetailByKeyWithHttpInfo
     *
     * Get single item by unique key
     *
     * @param  string $catalog_name Name of the catalog (required)
     * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field and the string value of the catalog entry.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemDetailByKeyWithHttpInfo($catalog_name, $key)
    {
        $request = $this->getItemDetailByKeyRequest($catalog_name, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemDetailByKeyAsync
     *
     * Get single item by unique key
     *
     * @param  string $catalog_name Name of the catalog (required)
     * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field and the string value of the catalog entry.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemDetailByKeyAsync($catalog_name, $key)
    {
        return $this->getItemDetailByKeyAsyncWithHttpInfo($catalog_name, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemDetailByKeyAsyncWithHttpInfo
     *
     * Get single item by unique key
     *
     * @param  string $catalog_name Name of the catalog (required)
     * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field and the string value of the catalog entry.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemDetailByKeyAsyncWithHttpInfo($catalog_name, $key)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2006';
        $request = $this->getItemDetailByKeyRequest($catalog_name, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemDetailByKey'
     *
     * @param  string $catalog_name Name of the catalog (required)
     * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field and the string value of the catalog entry.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemDetailByKeyRequest($catalog_name, $key)
    {
        // verify the required parameter 'catalog_name' is set
        if ($catalog_name === null || (is_array($catalog_name) && count($catalog_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_name when calling getItemDetailByKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getItemDetailByKey'
            );
        }

        $resourcePath = '/itemDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($catalog_name !== null) {
            if('form' === 'form' && is_array($catalog_name)) {
                foreach($catalog_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['catalogName'] = $catalog_name;
            }
        }
        // query params
        if ($key !== null) {
            if('form' === 'form' && is_array($key)) {
                foreach($key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['key'] = $key;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemInternal
     *
     * Get item
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id Item Id (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\Item
     */
    public function getItemInternal($catalog_id, $item_id)
    {
        list($response) = $this->getItemInternalWithHttpInfo($catalog_id, $item_id);
        return $response;
    }

    /**
     * Operation getItemInternalWithHttpInfo
     *
     * Get item
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id Item Id (required)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemInternalWithHttpInfo($catalog_id, $item_id)
    {
        $request = $this->getItemInternalRequest($catalog_id, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\Item' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\Item';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemInternalAsync
     *
     * Get item
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id Item Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemInternalAsync($catalog_id, $item_id)
    {
        return $this->getItemInternalAsyncWithHttpInfo($catalog_id, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemInternalAsyncWithHttpInfo
     *
     * Get item
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id Item Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemInternalAsyncWithHttpInfo($catalog_id, $item_id)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\Item';
        $request = $this->getItemInternalRequest($catalog_id, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemInternal'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  int $item_id Item Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemInternalRequest($catalog_id, $item_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getItemInternal'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getItemInternal'
            );
        }

        $resourcePath = '/internal/bags/{catalogId}/items/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByBag
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2005
     */
    public function getItemsByBag($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
    {
        list($response) = $this->getItemsByBagWithHttpInfo($catalog_id, $item_key, $search_by, $offset, $limit);
        return $response;
    }

    /**
     * Operation getItemsByBagWithHttpInfo
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByBagWithHttpInfo($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
    {
        $request = $this->getItemsByBagRequest($catalog_id, $item_key, $search_by, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsByBagAsync
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBagAsync($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
    {
        return $this->getItemsByBagAsyncWithHttpInfo($catalog_id, $item_key, $search_by, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByBagAsyncWithHttpInfo
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBagAsyncWithHttpInfo($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
        $request = $this->getItemsByBagRequest($catalog_id, $item_key, $search_by, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByBag'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByBagRequest($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getItemsByBag'
            );
        }

        $resourcePath = '/bags/{catalogId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_key !== null) {
            if('form' === 'form' && is_array($item_key)) {
                foreach($item_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['itemKey'] = $item_key;
            }
        }
        // query params
        if ($search_by !== null) {
            if('form' === 'form' && is_array($search_by)) {
                foreach($search_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['searchBy'] = $search_by;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByBagPost
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  float[] $request_body JSON array with item ids (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2005
     */
    public function getItemsByBagPost($catalog_id, $request_body = null)
    {
        list($response) = $this->getItemsByBagPostWithHttpInfo($catalog_id, $request_body);
        return $response;
    }

    /**
     * Operation getItemsByBagPostWithHttpInfo
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  float[] $request_body JSON array with item ids (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByBagPostWithHttpInfo($catalog_id, $request_body = null)
    {
        $request = $this->getItemsByBagPostRequest($catalog_id, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsByBagPostAsync
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  float[] $request_body JSON array with item ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBagPostAsync($catalog_id, $request_body = null)
    {
        return $this->getItemsByBagPostAsyncWithHttpInfo($catalog_id, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByBagPostAsyncWithHttpInfo
     *
     * Get items from catalog
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  float[] $request_body JSON array with item ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBagPostAsyncWithHttpInfo($catalog_id, $request_body = null)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
        $request = $this->getItemsByBagPostRequest($catalog_id, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByBagPost'
     *
     * @param  string $catalog_id ID of the catalog (required)
     * @param  float[] $request_body JSON array with item ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByBagPostRequest($catalog_id, $request_body = null)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getItemsByBagPost'
            );
        }

        $resourcePath = '/bags/{catalogId}/items/byIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByBusinessProfile
     *
     * Get items by Business Profile Id
     *
     * @param  int $bp_id Business Profile Id (required)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\Item[]
     */
    public function getItemsByBusinessProfile($bp_id, $search_by = null, $order_by = null, $offset = null, $limit = null)
    {
        list($response) = $this->getItemsByBusinessProfileWithHttpInfo($bp_id, $search_by, $order_by, $offset, $limit);
        return $response;
    }

    /**
     * Operation getItemsByBusinessProfileWithHttpInfo
     *
     * Get items by Business Profile Id
     *
     * @param  int $bp_id Business Profile Id (required)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByBusinessProfileWithHttpInfo($bp_id, $search_by = null, $order_by = null, $offset = null, $limit = null)
    {
        $request = $this->getItemsByBusinessProfileRequest($bp_id, $search_by, $order_by, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\Item[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\Item[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\Item[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\Item[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsByBusinessProfileAsync
     *
     * Get items by Business Profile Id
     *
     * @param  int $bp_id Business Profile Id (required)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBusinessProfileAsync($bp_id, $search_by = null, $order_by = null, $offset = null, $limit = null)
    {
        return $this->getItemsByBusinessProfileAsyncWithHttpInfo($bp_id, $search_by, $order_by, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByBusinessProfileAsyncWithHttpInfo
     *
     * Get items by Business Profile Id
     *
     * @param  int $bp_id Business Profile Id (required)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBusinessProfileAsyncWithHttpInfo($bp_id, $search_by = null, $order_by = null, $offset = null, $limit = null)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\Item[]';
        $request = $this->getItemsByBusinessProfileRequest($bp_id, $search_by, $order_by, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByBusinessProfile'
     *
     * @param  int $bp_id Business Profile Id (required)
     * @param  string $search_by A search string. The search takes all key values into account. (optional)
     * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByBusinessProfileRequest($bp_id, $search_by = null, $order_by = null, $offset = null, $limit = null)
    {
        // verify the required parameter 'bp_id' is set
        if ($bp_id === null || (is_array($bp_id) && count($bp_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bp_id when calling getItemsByBusinessProfile'
            );
        }

        $resourcePath = '/internal/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bp_id !== null) {
            if('form' === 'form' && is_array($bp_id)) {
                foreach($bp_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bpId'] = $bp_id;
            }
        }
        // query params
        if ($search_by !== null) {
            if('form' === 'form' && is_array($search_by)) {
                foreach($search_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['searchBy'] = $search_by;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderBy'] = $order_by;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemsByBusinessProfileid
     *
     * Get all items
     *
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\CatalogsApiClient\Model\InlineResponse2005
     */
    public function getItemsByBusinessProfileid($offset = null, $limit = null)
    {
        list($response) = $this->getItemsByBusinessProfileidWithHttpInfo($offset, $limit);
        return $response;
    }

    /**
     * Operation getItemsByBusinessProfileidWithHttpInfo
     *
     * Get all items
     *
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \Synerise\CatalogsApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\CatalogsApiClient\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemsByBusinessProfileidWithHttpInfo($offset = null, $limit = null)
    {
        $request = $this->getItemsByBusinessProfileidRequest($offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Synerise\CatalogsApiClient\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Synerise\CatalogsApiClient\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\CatalogsApiClient\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemsByBusinessProfileidAsync
     *
     * Get all items
     *
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBusinessProfileidAsync($offset = null, $limit = null)
    {
        return $this->getItemsByBusinessProfileidAsyncWithHttpInfo($offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemsByBusinessProfileidAsyncWithHttpInfo
     *
     * Get all items
     *
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemsByBusinessProfileidAsyncWithHttpInfo($offset = null, $limit = null)
    {
        $returnType = '\Synerise\CatalogsApiClient\Model\InlineResponse2005';
        $request = $this->getItemsByBusinessProfileidRequest($offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemsByBusinessProfileid'
     *
     * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
     * @param  int $limit The maximum number of items to include in the response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemsByBusinessProfileidRequest($offset = null, $limit = null)
    {

        $resourcePath = '/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
